{
  "publication": {
    "id": "65dc2b7cbb4eb0cd565b4463",
    "posts": {
      "edges": [
        {
          "node": {
            "id": "66334bb9c18427d98514c9c1",
            "slug": "hashnode-embed-test",
            "title": "Hashnode Embed Test",
            "author": {
              "id": "5e135008490269cb3022acbf",
              "username": "scissorsneedfoodtoo",
              "name": "Kristofer Koishigawa",
              "bio": {
                "text": ""
              },
              "profilePicture": "https://cdn.hashnode.com/res/hashnode/image/upload/v1710857138258/qSuNPwWGp.jpeg",
              "socialMediaLinks": {
                "website": "https://kriskoishigawa.com",
                "twitter": "https://twitter.com/kriskoishigawa",
                "facebook": ""
              },
              "location": ""
            },
            "tags": [
              {
                "id": "56744723958ef13879b9549b",
                "name": "Testing",
                "slug": "testing"
              }
            ],
            "coverImage": null,
            "brief": "YouTube\nhttps://www.youtube.com/watch?v=KZe0C0Qq4p0\n \nVimeo\nhttps://vimeo.com/137080554\n \nCodePen\nhttps://codepen.io/freeCodeCamp/pen/VPaoNP\n \nCodeSandbox\nhttps://codesandbox.io/s/react-new?fontsize=14&hidenavigation=1&theme=dark\n \nSeems to work with...",
            "readTimeInMinutes": 1,
            "content": {
              "html": "<h2 id=\"heading-youtube\">YouTube</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://www.youtube.com/watch?v=KZe0C0Qq4p0\">https://www.youtube.com/watch?v=KZe0C0Qq4p0</a></div>\n<p> </p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://youtu.be/HlGErt9s26Q\">https://youtu.be/HlGErt9s26Q</a></div>\n<p> </p>\n<h2 id=\"heading-vimeo\">Vimeo</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://vimeo.com/137080554\">https://vimeo.com/137080554</a></div>\n<p> </p>\n<h2 id=\"heading-codepen\">CodePen</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://codepen.io/freeCodeCamp/pen/VPaoNP\">https://codepen.io/freeCodeCamp/pen/VPaoNP</a></div>\n<p> </p>\n<h2 id=\"heading-codesandbox\">CodeSandbox</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://codesandbox.io/s/react-new?fontsize=14&amp;hidenavigation=1&amp;theme=dark\">https://codesandbox.io/s/react-new?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a></div>\n<p> </p>\n<p>Seems to work with older versions of Sandbox links (<a target=\"_blank\" href=\"https://codesandbox.io/s/react-new?fontsize=14&amp;hidenavigation=1&amp;theme=dark\">https://codesandbox.io/s/</a>*) and not newer versions (<a target=\"_blank\" href=\"https://codesandbox.io/p/sandbox/react-new?file=%2Fsrc%2FApp.js&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark\">https://codesandbox.io/p/sandbox/</a>*).</p>\n<p>However, adding an <code>iframe</code> directly to an HTML block works.</p>\n<h2 id=\"heading-twitter\">Twitter</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://twitter.com/freeCodeCamp/status/1780642881054609864\">https://twitter.com/freeCodeCamp/status/1780642881054609864</a></div>\n<p> </p>\n<h2 id=\"heading-x\">X</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://x.com/freeCodeCamp/status/1793688847299018852\">https://x.com/freeCodeCamp/status/1793688847299018852</a></div>\n<p> </p>\n<h2 id=\"heading-gist\">Gist</h2>\n<div class=\"gist-block embed-wrapper\" data-gist-show-loading=\"false\" data-id=\"539dbbd01ebfd36fd8a671124d290f5a\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a href=\"https://gist.github.com/scissorsneedfoodtoo/539dbbd01ebfd36fd8a671124d290f5a\" class=\"embed-card\">https://gist.github.com/scissorsneedfoodtoo/539dbbd01ebfd36fd8a671124d290f5a</a></div><p> </p>\n<h2 id=\"heading-glitch\">Glitch</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://glitch.com/embed/#!/glitter-magenta-machine?path=server.js%3A1%3A0\">https://glitch.com/embed/#!/glitter-magenta-machine?path=server.js%3A1%3A0</a></div>\n<p> </p>\n<h2 id=\"heading-soundcloud\">SoundCloud</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://soundcloud.com/l2shareost38/say-sue-me-so-tender-nevertheless-ost-part-8\">https://soundcloud.com/l2shareost38/say-sue-me-so-tender-nevertheless-ost-part-8</a></div>\n<p> </p>\n<h2 id=\"heading-anchor\">Anchor</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://anchor.fm/bravenotperfect/episodes/The-Bravery-To-Ask-For-Help-ft--Soledad-OBrien-eiq25m\">https://anchor.fm/bravenotperfect/episodes/The-Bravery-To-Ask-For-Help-ft--Soledad-OBrien-eiq25m</a></div>\n<p> </p>\n<h2 id=\"heading-spotify\">Spotify</h2>\n<p>Track:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://open.spotify.com/track/6Va86Ypwk0VV657Wk9sRFO\">https://open.spotify.com/track/6Va86Ypwk0VV657Wk9sRFO</a></div>\n<p> </p>\n<p>Playlist:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://open.spotify.com/playlist/37i9dQZF1DWWQRwui0ExPn\">https://open.spotify.com/playlist/37i9dQZF1DWWQRwui0ExPn</a></div>\n<p> </p>\n<p>Podcast:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://open.spotify.com/show/7CpuEnbCLIXwI6LEcbBOYP\">https://open.spotify.com/show/7CpuEnbCLIXwI6LEcbBOYP</a></div>\n<p> </p>\n<h2 id=\"heading-giphy\">Giphy</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://giphy.com/gifs/computer-cat-wearing-glasses-VbnUQpnihPSIgIXuZv\">https://giphy.com/gifs/computer-cat-wearing-glasses-VbnUQpnihPSIgIXuZv</a></div>\n<p> </p>\n<h2 id=\"heading-runkit\">Runkit</h2>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://runkit.com/bolajiayodeji/5f6fa7407d6a3d001a9f605e\">https://runkit.com/bolajiayodeji/5f6fa7407d6a3d001a9f605e</a></div>\n<p> </p>\n<h2 id=\"heading-iframe-in-html-block\">iframe in HTML Block</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/N1pYdEAU9mk?si=BapivyRfMfD99MTc\"></iframe>"
            },
            "publishedAt": "2024-05-02T08:15:53.976Z",
            "updatedAt": null
          }
        },
        {
          "node": {
            "id": "662bc86c57b91227386cc393",
            "slug": "ben-awad-is-a-gamedev-who-sleeps-9-hours-every-night-to-be-productive-podcast-121",
            "title": "Ben Awad is a GameDev Who Sleeps 9 Hours EVERY NIGHT to be Productive [Podcast #121]",
            "author": {
              "id": "5dfa3725066598ab2752cc5d",
              "username": "quincylarson",
              "name": "Quincy Larson",
              "bio": {
                "text": ""
              },
              "profilePicture": "https://cdn.hashnode.com/res/hashnode/image/upload/v1640878938509/PLqvxeH9g.jpeg",
              "socialMediaLinks": {
                "website": "https://www.freecodecamp.org",
                "twitter": "https://www.twitter.com/ossia",
                "facebook": ""
              },
              "location": ""
            },
            "tags": [
              {
                "id": "5ef8f394f32a5119fc5d3ae3",
                "name": "GameDev",
                "slug": "gamedev"
              },
              {
                "id": "56744721958ef13879b94a60",
                "name": "Productivity",
                "slug": "productivity"
              }
            ],
            "coverImage": {
              "url": "https://cdn.hashnode.com/res/hashnode/image/upload/v1714145342153/09d7ca1e-feb2-4aac-8a68-b28060ee646c.jpeg"
            },
            "brief": "On this week's episode of the podcast, freeCodeCamp founder Quincy Larson interviews Ben Awad, a game developer who creates developer tutorials on YouTube and TikTok.\nI hope you enjoy our conversation.\nCan you guess what bass line I'm playing on my b...",
            "readTimeInMinutes": 1,
            "content": {
              "html": "<p>On this week's episode of the podcast, freeCodeCamp founder Quincy Larson interviews Ben Awad, a game developer who creates developer tutorials on YouTube and TikTok.</p>\n<p>I hope you enjoy our conversation.</p>\n<p>Can you guess what bass line I'm playing on my bass during the intro? It's from a 1979 song.</p>\n<p>You can watch the interview on freeCodeCamp's YouTube channel:</p>\n<p>Or you can listen to the podcast in Apple Podcasts, Spotify, or your favorite podcast app. You can also listen to the podcast below, right in your browser:</p>\n<p>Be sure to follow The freeCodeCamp podcast in your favorite podcast app. And share this podcast with a friend. Let's inspire more folks to learn to code and build careers for themselves in tech.</p>\n<p>Also, I want to thank the 8,983 kind people who support our charity each month, and who make this podcast possible. You can join them and support our mission at: <a target=\"_blank\" href=\"https://www.freecodecamp.org/donate\">https://www.freecodecamp.org/donate</a></p>\n<h2 id=\"heading-links-we-talk-about-during-the-interview\">Links we talk about during the interview:</h2>\n<p>Ben's game, Void Pet on Android and iOS (Built in React Native): <a target=\"_blank\" href=\"https://voidpet.com/\">https://voidpet.com/</a></p>\n<p>XKCD coming on \"Real Programmers\" that Quincy mentions: <a target=\"_blank\" href=\"https://xkcd.com/378/\">https://xkcd.com/378/</a></p>\n<p>React Native course by Ben Awad: <a target=\"_blank\" href=\"https://www.freecodecamp.org/news/create-an-app-that-works-on-ios-android-and-the-web-with-react-native-web/\">https://www.freecodecamp.org/news/create-an-app-that-works-on-ios-android-and-the-web-with-react-native-web/</a></p>\n<p>I couldn't find my Mac Control hotkeys video tutorial that I mentioned anywhere, so I wrote a quick article explaining how to use these: <a target=\"_blank\" href=\"https://www.freecodecamp.org/news//mac-control-keyboard-shortcuts-hotkeys-macos\">https://www.freecodecamp.org/news//mac-control-keyboard-shortcuts-hotkeys-macos</a></p>\n",
              "markdown": "On this week's episode of the podcast, freeCodeCamp founder Quincy Larson interviews Ben Awad, a game developer who creates developer tutorials on YouTube and TikTok.\n\nI hope you enjoy our conversation.\n\nCan you guess what bass line I'm playing on my bass during the intro? It's from a 1979 song.\n\nYou can watch the interview on freeCodeCamp's YouTube channel:\n\nOr you can listen to the podcast in Apple Podcasts, Spotify, or your favorite podcast app. You can also listen to the podcast below, right in your browser:\n\nBe sure to follow The freeCodeCamp podcast in your favorite podcast app. And share this podcast with a friend. Let's inspire more folks to learn to code and build careers for themselves in tech.\n\nAlso, I want to thank the 8,983 kind people who support our charity each month, and who make this podcast possible. You can join them and support our mission at: [https://www.freecodecamp.org/donate](https://www.freecodecamp.org/donate)\n\n## Links we talk about during the interview:\n\nBen's game, Void Pet on Android and iOS (Built in React Native): [https://voidpet.com/](https://voidpet.com/)\n\nXKCD coming on \"Real Programmers\" that Quincy mentions: [https://xkcd.com/378/](https://xkcd.com/378/)\n\nReact Native course by Ben Awad: [https://www.freecodecamp.org/news/create-an-app-that-works-on-ios-android-and-the-web-with-react-native-web/](https://www.freecodecamp.org/news/create-an-app-that-works-on-ios-android-and-the-web-with-react-native-web/)\n\nI couldn't find my Mac Control hotkeys video tutorial that I mentioned anywhere, so I wrote a quick article explaining how to use these: [https://www.freecodecamp.org/news//mac-control-keyboard-shortcuts-hotkeys-macos](https://www.freecodecamp.org/news//mac-control-keyboard-shortcuts-hotkeys-macos)"
            },
            "publishedAt": "2024-04-26T15:29:48.337Z",
            "updatedAt": "2024-04-26T19:26:49.174Z"
          }
        },
        {
          "node": {
            "id": "661e2bc550a7433c8ecc4d0b",
            "slug": "hashnode-no-feature-image",
            "title": "Hashnode No Feature Image",
            "author": {
              "id": "5e135008490269cb3022acbf",
              "username": "scissorsneedfoodtoo",
              "name": "Kristofer Koishigawa",
              "bio": {
                "text": ""
              },
              "profilePicture": "https://cdn.hashnode.com/res/hashnode/image/upload/v1710857138258/qSuNPwWGp.jpeg",
              "socialMediaLinks": {
                "website": "https://kriskoishigawa.com",
                "twitter": "https://twitter.com/kriskoishigawa",
                "facebook": ""
              },
              "location": ""
            },
            "tags": [
              {
                "id": "56744723958ef13879b9549b",
                "name": "Testing",
                "slug": "testing"
              }
            ],
            "coverImage": null,
            "brief": "Force dog to sleep on floor and litter kitter kitty litty little kitten big roar roar feed me, why use post when this sofa is here paw your face to wake you up in the morning claws in your leg.",
            "readTimeInMinutes": 1,
            "content": {
              "html": "<p>Force dog to sleep on floor and litter kitter kitty litty little kitten big roar roar feed me, why use post when this sofa is here paw your face to wake you up in the morning claws in your leg.</p>\n"
            },
            "publishedAt": "2024-04-16T07:41:57.015Z",
            "updatedAt": null
          }
        },
        {
          "node": {
            "id": "660aae505256f62ea103144a",
            "slug": "freecodecamp-press-books-handbooks",
            "title": "Introducing freeCodeCamp Press – Free Books for Developers",
            "author": {
              "id": "5e1e335a7a1d3fcc59028c64",
              "username": "abbeyrenn",
              "name": "Abigail Rennemeyer",
              "bio": {
                "text": "I love editing articles and working with contributors. I also love the outdoors and good food.\n"
              },
              "profilePicture": "https://cdn.hashnode.com/res/hashnode/image/upload/v1579037532919/F7MLrJxZF.jpeg",
              "socialMediaLinks": {
                "website": "",
                "twitter": "https://twitter.com/abbeyrenn",
                "facebook": ""
              },
              "location": "USA"
            },
            "tags": [
              {
                "id": "57039f98f950faa9ab7ec552",
                "name": "freeCodeCamp.org",
                "slug": "freecodecamp"
              },
              {
                "id": "5c6e71ade82dbd8d6ba0684c",
                "name": "technical writing",
                "slug": "technical-writing"
              }
            ],
            "coverImage": {
              "url": "https://cdn.hashnode.com/res/hashnode/image/upload/v1711976285627/4fb04ca0-1e79-4d9d-9737-6a986fc37324.png"
            },
            "brief": "The freeCodeCamp community has published more than 10,000 tutorials on our publication over the years. But lately we've focused on creating even longer resources for learning math, programming, and computer science.\nThis is why we've created freeCode...",
            "readTimeInMinutes": 5,
            "content": {
              "html": "<p>The freeCodeCamp community has published more than 10,000 tutorials on our publication over the years. But lately we've focused on creating even longer resources for learning math, programming, and computer science.</p>\n<p>This is why we've created freeCodeCamp Press – a division of freeCodeCamp where we publish full-length books and handbooks on our online publication – all available to everyone for free.</p>\n<h2 id=\"heading-what-is-freecodecamp-press\">What is freeCodeCamp Press?</h2>\n<p>The freeCodeCamp community publication publishes technical tutorials in many forms. We publish shorter, more focused guides that aim to answer a specific question. We also publish longer walkthroughs that help you build a specific project.</p>\n<p>And now we're publishing more comprehensive books and handbooks that will teach you everything you need to know to get started with a certain programming language or tool.</p>\n<p>We're going to publish a lot more of these 5,000+ word handbooks and full-length books of 40,000 words or longer.</p>\n<p>When an author submits a substantial tutorial that we consider to be a book or handbook, the editorial team reviews and edits it as usual. This helps make sure it's as complete and polished as possible.</p>\n<p>We've also started designing cover images for our books and handbooks. If the author wants to take advantage of this professional cover and the consistent look it gives their handbook or book, one of our team members (<a target=\"_blank\" href=\"https://www.freecodecamp.org/news/author/estefaniacn\">Estefania</a>) designs and creates it. These covers look something like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1711975579791/b555ffa0-4d40-4d13-b8ff-3b105cf3f2af.png\" alt=\"Example handbook cover (freeCodeCamp Press)\" class=\"image--center mx-auto\" /></p>\n<p>After showing the proof to the author, we add the cover to the book or handbook and publish it. These covers help create a consistent look and feel for these substantial resources and make them easy to recognize.</p>\n<h2 id=\"heading-i-want-to-write-a-book-or-handbook-for-freecodecamp-how-do-i-do-that\">I Want to Write a Book or Handbook for freeCodeCamp. How Do I Do That?</h2>\n<p>If you're already a contributor to the publication, and you'd like to write a longer-form book or handbook, that's great! Pick a topic you know a lot about and start writing.</p>\n<p>You can look at some of our other books and handbooks in the next section to get an idea what these books are like, and how they're structured.</p>\n<p>It's a serious endeavor to write a book or a handbook, so take your time. Do your research, test your code, and create something great.</p>\n<p>If you haven't applied to become a contributor to the publication yet, but think you and your books would be a good fit, you can <a target=\"_blank\" href=\"https://www.freecodecamp.org/news/developer-news-style-guide/\">read our style guide here</a>. Then, if it looks like your style is similar to freeCodeCamp's, go ahead and apply.</p>\n<h2 id=\"heading-freecodecamps-published-books-and-handbooks\">freeCodeCamp's Published Books and Handbooks</h2>\n<p>Here are some of the handbooks freeCodeCamp Press has published so far on our community publication. We're publishing more almost every week, so this is just a sample:</p>\n<ol>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/complete-guide-to-css-transform-functions-and-properties/\">CSS Transform Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-golang-handbook/\">The Golang Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/complete-guide-to-css-grid/\">The CSS Grid Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/http-full-course/\">HTTP Networking in JavaScript Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-solidity-handbook/\">The Solidity and Smart Contract Development Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/what-is-programming-tutorial-for-beginners/\">What is Programming? A Beginner's Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/\">Python Code Example Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-java-handbook/\">The Java Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/a-practical-guide-to-start-opensource-contributions/\">Open Source for Developers Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-build-an-ai-chatbot-with-redis-python-and-gpt/\">The AI Chatbot Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/javascript-es-modules-and-module-bundlers/\">The JavaScript Modules Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/python-code-examples-simple-python-program-example/\">Python Code Examples for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-install-arch-linux/\">The Arch Linux Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-javascript-array-handbook/\">The JavaScript Array Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-nginx-handbook/\">The NGNIX Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-docker-handbook/\">The Docker Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-become-a-full-stack-web-developer-in-2020/\">Full Stack Web Developer Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-kubernetes-handbook/\">The Kubernetes Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-build-your-first-saas/\">How to Build Your First SaaS Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/technology-trends-in-2022-keeping-up-full-book-for-managers/\">Technology Trends Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/systems-design-for-interviews/\">System Design Interview Questions Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/git-internals-objects-branches-create-repo/\">Visual Guide to Git Internals</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-complete-guide-to-the-ethernet-protocol/\">How the Ethernet Protocol Works</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/git-diff-and-patch/\">Git Diff and Patch Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-definitive-guide-to-git-merge/\">The Git Merge Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-create-a-custom-react-hook-and-publish-it-to-npm/\">Custom React Hooks Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/typescript-tutorial-for-react-developers/\">TypeScript Handbook for React Developers</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/fastapi-quickstart/\">The FastAPI Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/html-css-handbook-for-beginners/\">The HTML and CSS Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-python-code-example-handbook/\">Learn Python with Code Examples</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-data-science-and-ai-handbook/\">The Data Science and AI Career Guide</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/agile-software-development-handbook/\">The Agile Software Development Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/\">The C Programming Handbook for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-write-clean-code/\">The Clean Code Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/front-end-javascript-development-react-angular-vue-compared/\">Front End JavaScript Development Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/design-patterns-for-distributed-systems/\">Design Patterns for Distributed Systems Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/get-started-with-nodejs/\">Learn Node.js – Handbook for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/building-consuming-and-documenting-a-graphql-api/\">The GraphQL API Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/build-consume-and-document-a-rest-api/\">The REST API Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-create-a-static-blog-with-lume/\">Lume Static Site Generator Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/an-introduction-to-software-architecture-patterns/\">The Software Architecture Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-php-handbook/\">The PHP Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/rest-api-design-best-practices-build-a-rest-api/\">REST API Design Best Practices Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/an-introduction-to-operating-systems/\">Windows vs Mac vs Linux – Operating Systems Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/command-line-for-beginners/\">Command Line Handbook for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/python-string-manipulation-handbook/\">Python String Manipulation Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-deno-handbook/\">The Deno Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-python-guide-for-beginners/\">The Python Beginner's Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-beginners-handbook/\">The C Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-complete-javascript-handbook-f26b2c71719c/\">The JavaScript Beginner's Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-next-js-handbook/\">The Next.js Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-svelte-handbook/\">The Svelte Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-html-handbook/\">Learn HTML for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/coding-bootcamp-handbook/\">The Coding Bootcamp Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/\">The CSS Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-react-handbook-b71c27b0a795/\">The React Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-definitive-node-js-handbook-6912378afc6e/\">The Node.js Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-vue-handbook-a-thorough-introduction-to-vue-js-1e86835d8446/\">The Vue Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-top-stack-overflowed-typescript-questions-explained/\">Intermediate TypeScript</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/reintroducing-react-every-react-update-since-v16-demystified-60686ee292cc/\">React Updates Since v16</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/everything-you-need-to-know-about-css-variables-c74d922ea855/\">CSS Variables Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/\">Learn Python Through Examples</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/javascript-array-handbook/\">The JavaScript Array Methods Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/javascript-array-handbook/\">The AI and Cybersecurity Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/a-beginners-guide-to-sql/\">The SQL Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/databricks-sql-handbook/\">Databricks Delta Lake with SQL Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-contribute-to-open-source-handbook/\">How to Contribute to Open Source Projects</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/css-transition-vs-css-animation-handbook/\">CSS Transitions vs Animations Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-arduino-handbook/\">The Arduino Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-javascript-dom-manipulation-handbook/\">The JavaScript DOM Manipulation Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-make-seo-friendly-react-apps/\">How to Make React Apps SEO-Friendly</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/javascript-string-handbook/\">The JavaScript String Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/creators-guide-to-innovation-book/\">Variables in Figma Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-coding-for-everyone-handbook/\">How to Start Learning to Code</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/java-interview-prep-handbook/\">The Java Interview Prep Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/software-engineer-internship-handbook/\">The Software Engineering Internship Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/data-structures-the-key-to-scalable-software/\">The Data Structures Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/machine-learning-handbook/\">Machine Learning Fundamentals Handbook</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-css-flexbox-handbook/\">The CSS Flexbox Handbook</a></p>\n</li>\n</ol>\n<p>And here are some of our books:</p>\n<ol>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-to-code-book/\">How to Learn to Code and Get a Developer Job</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/regular-expressions-for-javascript-developers/\">Regular Expressions for Developers</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6/\">The Redux Book for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/how-to-use-the-astro-ui-framework/\">Astro UI Framework</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-python-book/\">Learn Python Programming</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/gitting-things-done-book/\">A Visual and Practical Guide to Git</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/creators-guide-to-innovation-book/\">How to Innovate as a Developer</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-java-object-oriented-programming/\">Learn Java Fundamentals</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/localization-book-how-to-translate-your-website/\">The Localization Book</a></p>\n</li>\n</ol>\n<p>We're just getting started publishing free books and handbooks for the developer community. And they're all accessible for free <a target=\"_blank\" href=\"https://www.freecodecamp.org/news\">right on freeCodeCamp News</a>.</p>\n<p>We hope you enjoy these open learning resources, and that they help you level up your coding skills.</p>\n"
            },
            "publishedAt": "2023-08-29T15:00:00.000Z",
            "updatedAt": "2024-04-01T12:58:13.648Z"
          }
        },
        {
          "node": {
            "id": "660aa748b610f3f1cdcb7ae7",
            "slug": "the-c-programming-handbook-for-beginners",
            "title": "The C Programming Handbook for Beginners",
            "author": {
              "id": "65e033f44dbb4a55d1fdfde5",
              "username": "dionysialemonaki",
              "name": "Dionysia Lemonaki",
              "bio": {
                "text": ""
              },
              "profilePicture": "https://cdn.hashnode.com/res/hashnode/image/upload/v1709192180426/bcebca95-2010-4117-ab52-ba28c7e792d7.png",
              "socialMediaLinks": {
                "website": null,
                "twitter": null,
                "facebook": null
              },
              "location": null
            },
            "tags": [
              {
                "id": "56744720958ef13879b94813",
                "name": "c programming",
                "slug": "c-programming"
              },
              {
                "id": "5e67d6a44d4d590c4325919f",
                "name": "beginners guide",
                "slug": "beginners-guide"
              },
              {
                "id": "56744723958ef13879b95218",
                "name": "handbook",
                "slug": "handbook"
              }
            ],
            "coverImage": {
              "url": "https://cdn.hashnode.com/res/hashnode/image/upload/v1711974201471/91d65a55-056c-4fb5-b615-f5fceded6d51.png"
            },
            "brief": "C is one of the oldest, most widely known, and most influential programming languages.\nIt is used in many industries because it is a highly flexible and powerful language.\nLearning C is a worthwhile endeavor – no matter your starting point or aspirat...",
            "readTimeInMinutes": 63,
            "content": {
              "html": "<p>C is one of the oldest, most widely known, and most influential programming languages.</p>\n<p>It is used in many industries because it is a highly flexible and powerful language.</p>\n<p>Learning C is a worthwhile endeavor – no matter your starting point or aspirations – because it builds a solid foundation in the skills you will need for the rest of your programming career.</p>\n<p>It helps you understand how a computer works underneath the hood, such as how it stores and retrieves information and what the internal architecture looks like.</p>\n<p>With that said, C can be a difficult language to learn, especially for beginners, as it can be cryptic.</p>\n<p>This handbook aims to teach you C programming fundamentals and is written with the beginner programmer in mind.</p>\n<p>There are no prerequisites, and no previous knowledge of any programming concepts is assumed.</p>\n<p>If you have never programmed before and are a complete beginner, you have come to the right place.</p>\n<p>Here is what you are going to learn in this handbook:</p>\n<ul>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-1\">Chapter 1: Introduction to C Programming</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-2\">Chapter 2: Variables and Data Types in C</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-3\">Chapter 3: Operators in C</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-4\">Chapter 4: Conditional Statements in C</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-5\">Chapter 5: Loops in C</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-6\">Chapter 6: Arrays in C</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#chapter-7\">Chapter 7: Strings in C</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/#further-learning\">Further learning: Advanced C Topics</a></p>\n</li>\n</ul>\n<p>Without further ado, let’s get started with learning C!</p>\n<h2 id=\"heading-chapter-1-introduction-to-c-programming\"><strong>Chapter 1: Introduction to C Programming</strong></h2>\n<p>In this introductory chapter, you will learn the main characteristics and use cases of the C programming language.</p>\n<p>You will also learn the basics of C syntax and familiarize yourself with the general structure of all C programs.</p>\n<p>By the end of the chapter, you will have set up a development environment for C programming so you can follow along with the coding examples in this book on your local machine.</p>\n<p>You will have successfully written, compiled, and executed your first simple C program that prints the text \"Hello, world!\" to the screen.</p>\n<p>You will have also learned some core C language features, such as comments for documenting and explaining your code and escape sequences for representing nonprintable characters in text.</p>\n<h3 id=\"heading-what-is-programming\"><strong>What Is Programming?</strong></h3>\n<p>Computers are not that smart.</p>\n<p>Even though they can process data tirelessly and can perform operations at a very high speed, they cannot think for themselves. They need someone to tell them what to do next.</p>\n<p>Humans tell computers what to do and exactly how to do it by giving them detailed and step-by-step instructions to follow.</p>\n<p>A collection of detailed instructions is known as a program.</p>\n<p>Programming is the process of writing the collection of instructions that a computer can understand and execute to perform a specific task and solve a particular problem.</p>\n<p>A programming language is used to write the instructions.</p>\n<p>And the humans who write the instructions and supply them to the computer are known as programmers.</p>\n<h4 id=\"heading-low-level-vs-high-level-vs-middle-level-programming-languages-whats-the-difference\"><strong>Low-level VS High-Level VS Middle-level Programming Languages – What's The Difference?</strong></h4>\n<p>There are three types of programming languages: low-level languages, high-level languages, and middle-level languages.</p>\n<p>Low-level languages include machine language (also known as binary) and assembly language.</p>\n<p>Both languages provide little to no abstraction from the computer's hardware. The language instructions are closely related to or correspond directly to specific machine instructions.</p>\n<p>This 'closeness to the machine' allows for speed, efficiency, less consumption of memory, and fine-grained control over the computer's hardware.</p>\n<p>Machine language is the lowest level of programming languages.</p>\n<p>The instructions consist of series of <code>0</code>s and <code>1</code>s that correspond directly to a particular computer’s instructions and locations memory.</p>\n<p>Instructions are also directly executed by the computer’s processor.</p>\n<p>Even though machine language was the language of choice for writing programs in the early days of computing, it is not a human-readable language and is time-consuming to write.</p>\n<p>Assembly language allows the programmer to work closely with the machine on a slightly higher level.</p>\n<p>It uses mnemonics and symbols that correspond directly to a particular machine’s instruction set instead of using sequences of <code>0</code>s and <code>1</code>s.</p>\n<p>Next, high-level languages, like Python and JavaScript, are far removed from the instruction set of a particular machine architecture.</p>\n<p>Their syntax resembles the English language, making them easier to work with and understand.</p>\n<p>Programs written in high-level languages are also portable and machine-independent. That is, a program can run on any system that supports that language.</p>\n<p>With that said, they tend to be slower, consume more memory, and make it harder to work with low-level hardware and systems because of how abstract they are.</p>\n<p>Lastly, middle-level languages, like C and C++, act as a bridge between low-level and high-level programming languages.</p>\n<p>They allow for closeness and a level of control over computer hardware. At the same time, they also offer a level of abstraction with instructions that are more human-readable and understandable for programmers to write.</p>\n<h3 id=\"heading-what-is-the-c-programming-language\"><strong>What Is the C Programming Language?</strong></h3>\n<p>C is a general-purpose and procedural programming language.</p>\n<p>A procedural language is a type of programming language that follows a step-by-step approach to solving a problem.</p>\n<p>It uses a series of instructions, otherwise known as procedures or functions, that are executed in a specific order to perform tasks and accomplish goals. These intructions tell the computer step by step what to do and in what order.</p>\n<p>So, C programs are divided into smaller, more specific functions that accomplish a certain task and get executed sequentially, one after another, following a top-down approach.</p>\n<p>This promotes code readability and maintainability.</p>\n<h4 id=\"heading-a-brief-history-of-the-c-programming-language\"><strong>A Brief History of the C Programming Language</strong></h4>\n<p>C was developed in the early 1970s by Dennis Ritchie at AT&amp;T Bell Laboratories.</p>\n<p>The development of C was closely tied to the development of the Unix operating system at Bell Labs.</p>\n<p>Historically, operating systems were typically written in Assembly language and without portability in mind.</p>\n<p>During the development of Unix, there was a need for a more efficient and portable programming language for writing operating systems.</p>\n<p>Dennis Ritchie went on to create a language called B, which was an evolution from an earlier language called BCPL (Basic Combined Programming Language).</p>\n<p>It aimed to bridge the gap between the low-level capabilities of Assembly and the high-level languages used at the time, such as Fortran.</p>\n<p>B was not powerful enough to support Unix development, so Dennis Ritchie developed a new language that took inspiration from B and BCPL and had some additional features. He named this language C.</p>\n<p>C’s simple design, speed, efficiency, performance, and close relationship with a computer’s hardware made it an attractive choice for systems programming. This led to the Unix operating system being rewritten in C.</p>\n<h4 id=\"heading-c-language-characteristics-and-use-cases\"><strong>C Language Characteristics and Use Cases</strong></h4>\n<p>Despite C being a relatively old language (compared to other, more modern, programming languages in use today), it has stood the test of time and still remains popular.</p>\n<p>According to the <a target=\"_blank\" href=\"https://www.tiobe.com/tiobe-index/\">TIOBE index</a>, which measures the popularity of programming languages each month, C is the second most popular programming language as of August 2023.</p>\n<p>This is because C is considered the \"mother of programming languages\" and is one of the most foundational languages of computer science.</p>\n<p>Most modern and popular languages used today either use C under the hood or are inspired by it.</p>\n<p>For example, Python’s default implementation and interpreter, CPython, is written in C. And languages such as C++ and C# are extensions of C and provide additional functionality.</p>\n<p>Even though C was originally designed with systems programming in mind, it is widely used in many other areas of computing.</p>\n<p>C programs are portable and easy to implement, meaning they can be executed across different platforms with minimal changes.</p>\n<p>C also allows for efficient and direct memory manipulation and management, making it an ideal language for performance-critical applications.</p>\n<p>And C provides higher-level abstractions along with low-level capabilities, which allows programmers to have fine-grained control over hardware resources when they need to.</p>\n<p>These characteristics make C an ideal language for creating operating systems, embedded systems, system utilities, Internet of things (IoT) devices, database systems, and various other applications.</p>\n<p>C is used pretty much everywhere today.</p>\n<h3 id=\"heading-how-to-set-up-a-development-environment-for-c-programming-on-your-local-machine\"><strong>How to Set Up a Development Environment for C Programming on Your Local Machine</strong></h3>\n<p>To start writing C programs on your local machine, you will need the following:</p>\n<ul>\n<li><p>A C Compiler</p>\n</li>\n<li><p>An Integrated Development Environment (IDE)</p>\n</li>\n</ul>\n<p>C is a compiled programming language, like Go, Java, Swift, and Rust.</p>\n<p>Compiled languages are different from interpeted languages, such as PHP, Ruby, Python, and JavaScript.</p>\n<p>The difference between compiled and interpeted languages is that a compiled language is directly translated to machine code all at once.</p>\n<p>This process is done by a special program called a compiler.</p>\n<p>The compiler reads the entire source code, checks it for errors, and then translates the entire program into machine code. This is a language the computer can understand and it's directly associated with the particular instructions of the computer.</p>\n<p>This process creates a standalone binary executable file containing sequences of <code>0</code>s and <code>1</code>s which is a more computer-friendly form of the initial source code. This file contains instructions that the computer can understand and run directly.</p>\n<p>An interpeted language, on the other hand, doesn’t get translated into machine code all at once and doesn’t produce a binary executable file.</p>\n<p>Instead, an interpreter reads and executes the source code one instruction at a time, line by line. The interpreter reads each line, translates it into machine code, and then immediately runs it.</p>\n<p>If you are using a Unix or a Unix-like system such as macOS or Linux, you probably have the popular <a target=\"_blank\" href=\"https://gcc.gnu.org/\">GNU Compiler Collection (GCC)</a> already installed on your machine.</p>\n<p>If you are running either of those operating systems, open the terminal application and type the following command:</p>\n<pre><code class=\"lang-plaintext\">gcc --version\n</code></pre>\n<p>If you're using macOS and have not installed the command line developer tools, a dialog box will pop-up asking you to install them – so if you see that, go ahead and do so.</p>\n<p>If you have already installed the command line tools, you will see an output with the version of the compiler, which will look similar to the following:</p>\n<pre><code class=\"lang-plaintext\">Apple clang version 14.0.0 (clang-1400.0.29.202)\n</code></pre>\n<p>If you are using Windows, you can check out <a target=\"_blank\" href=\"https://www.codeblocks.org/\">Code::Blocks</a> or look into installing <a target=\"_blank\" href=\"https://learn.microsoft.com/en-us/windows/wsl/install\">Linux on Windows with WSL</a>. Feel free to pick whatever programming environment works best for you.</p>\n<p>An IDE is where you write, edit, save, run, and debug your C programs. You can think of it like a word processor but for writing code.</p>\n<p><a target=\"_blank\" href=\"https://code.visualstudio.com/\">Visual Studio Code</a> is a great editor for writing code, and offers many IDE-like features.</p>\n<p>It is free, open-source, supports many programming languages, and is available for all operating systems.</p>\n<p>Once you have downloaded Visual Studio Code, install the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\">C/C++ extension</a>.</p>\n<p>It’s also a good idea to enable auto-saving by selecting: \"File\" -&gt; \"Auto Save\".</p>\n<p>If you want to learn more, you can look through the <a target=\"_blank\" href=\"https://code.visualstudio.com/docs/languages/cpp\">Visual Studio Code documentation for C/C++</a>.</p>\n<p>With your local machine all set up, you are ready to write your first C program!</p>\n<h3 id=\"heading-how-to-write-your-first-c-program\"><strong>How to Write Your First C Program</strong></h3>\n<p>To get started, open Visual Studio Code and create a new folder for your C program by navigating to \"File\" -&gt; \"Open\" -&gt; \"New Folder\".</p>\n<p>Give this folder a name, for example, <code>c-practice</code>, and then select \"Create\" -&gt; “Open\".</p>\n<p>You should now have the <code>c-practice</code> folder open in Visual Studio Code.</p>\n<p>Inside the folder you just created, create a new C file.</p>\n<p>Hold down the <code>Command</code> key and press <code>N</code> on macOS or hold down the <code>Control</code> and press <code>N</code> for Windows/Linux to create an <code>Untitled-1</code> file.</p>\n<p>Hold down the <code>Command</code> key and press <code>S</code> on macOS or hold down the <code>Control</code> key and press <code>S</code> for Windows/Linux, and save the file as a <code>main.c</code> file.</p>\n<p>Finally, click \"Save\".</p>\n<p>Make sure that you save the file you created with a <code>.c</code> extension, or it won’t be a valid C file.</p>\n<p>You should now have the <code>main.c</code> file you just created open in Visual Studio Code.</p>\n<p>Next, add the following code:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-comment\">// output 'Hello, world!' to the console</span>\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Hello, world!\\n\"</span>);\n}\n</code></pre>\n<p>Let’s go over each line and explain what is happening in the program.</p>\n<h4 id=\"heading-what-are-header-files-in-c\"><strong>What Are Header Files in C?</strong></h4>\n<p>Let’s start with the first line, <code>#include &lt;stdio.h&gt;</code>.</p>\n<p>The <code>#include</code> part of <code>#include &lt;stdio.h&gt;</code> is a preprocessor command that tells the C compiler to include a file.</p>\n<p>Specifically, it tells the compiler to include the <code>stdio.h</code> header file.</p>\n<p>Header files are external libraries.</p>\n<p>This means that some developers have written some functionality and features that are not included at the core of the C language.</p>\n<p>By adding header files to your code, you get additional functionality that you can use in your programs without having to write the code from scratch.</p>\n<p>The <code>stdio.h</code> header file stands for standard input-output.</p>\n<p>It contains function definitions for input and output operations, such as functions for gathering user data and printing data to the console.</p>\n<p>Specifically, it provides functions such as <code>printf()</code> and <code>scanf()</code>.</p>\n<p>So, this line is necessary for the function we have later on in our program, <code>printf()</code>, to work.</p>\n<p>If you don't include the <code>stdio.h</code> file at the top of your code, the compiler will not understand what the <code>printf()</code> function is.</p>\n<h4 id=\"heading-what-is-themain-function-in-c\"><strong>What is the</strong><code>main()</code> function in C?</h4>\n<p>Next, <code>int main(void) {}</code> is the main function and starting point of every C program.</p>\n<p>It is the first thing that is called when the program is executed.</p>\n<p>Every C program must include a <code>main()</code> function.</p>\n<p>The <code>int</code> keyword in <code>int main(void) {}</code> indicates the return value of the <code>main()</code> function.</p>\n<p>In this case, the function will return an integer number.</p>\n<p>And the <code>void</code> keyword inside the <code>main()</code> function indicates that the function receives no arguments.</p>\n<p>Anything inside the curly braces, <code>{}</code>, is considered the body of the function – here is where you include the code you want to write. Any code written here will always run first.</p>\n<p>This line acts as a boilerplate and starting point for all C programs. It lets the computer know where to begin reading the code when it executes your programs.</p>\n<h4 id=\"heading-what-are-comments-in-c\"><strong>What Are Comments in C?</strong></h4>\n<p>In C programming, comments are lines of text that get ignored by the compiler.</p>\n<p>Writing comments is a way to provide additional information and describe the logic, purpose, and functionality of your code.</p>\n<p>Comments provide a way to document your code and make it more readable and understandable for anyone who will read and work with it.</p>\n<p>Having comments in your source code is also helpful for your future self. So when you come back to the code in a few months and don't remember how the code works, these comments can help.</p>\n<p>Comments are also helpful for debugging and troubleshooting. You can temporarily comment out lines of code to isolate problems.</p>\n<p>This will allow you to ignore a section of code and concentrate on the piece of code you are testing and working on without having to delete anything.</p>\n<p>There are two types of comments in C:</p>\n<ul>\n<li><p>Single-line comments</p>\n</li>\n<li><p>Multi-line comments</p>\n</li>\n</ul>\n<p>Single-line comments start with two forward slashes, <code>//</code>, and continue until the end of the line.</p>\n<p>Here is the syntax for creating a single-line comment in C:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-comment\">// I am a single-line comment</span>\n</code></pre>\n<p>Any text written after the forward slashes and on the same line gets ignored by the compiler.</p>\n<p>Multi-line comments start with a forward slash, <code>/</code>, followed by an asterisk, <code>*</code>, and end with an asterisk, followed by a forward slash.</p>\n<p>As the name suggests, they span multiple lines.</p>\n<p>They offer a way to write slightly longer explanations or notes within your code and explain in more detail how it works.</p>\n<p>Here is the syntax for creating a multi-line comment in C:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-comment\">/*\nThis is\na multi-line\ncomment\n*/</span>\n</code></pre>\n<h3 id=\"heading-what-is-theprintf-function-in-c\"><strong>What is the</strong><code>printf()</code> function in C?</h3>\n<p>Inside the function's body, the line <code>printf(\"Hello, World!\\n\");</code> prints the text <code>Hello, World!</code> to the console (this text is also known as a string).</p>\n<p>Whenever you want to display something, use the <code>printf()</code> function.</p>\n<p>Surround the text you want to display in double quotation marks, <code>\"\"</code>, and make sure it is inside the parentheses of the <code>printf()</code> function.</p>\n<p>The semicolon, <code>;</code>, terminates the statement. All statements need to end with a semicolon in C, as it identifies the end of the statement.</p>\n<p>You can think of a semicolon similar to how a full stop/period ends a sentence.</p>\n<h3 id=\"heading-what-are-escape-sequences-in-c\"><strong>What Are Escape Sequences in C?</strong></h3>\n<p>Did you notice the <code>\\n</code> at the end of <code>printf(\"Hello, World!\\n\");</code>?</p>\n<p>It's called an escape sequence, which means that it is a character that creates a newline and tells the cursor to move to the next line when it sees it.</p>\n<p>In programming, an escape sequence is a combination of characters that represents a special character within a string.</p>\n<p>They provide a way to include special characters that are difficult to represent directly in a string.</p>\n<p>They consist of a backslash, <code>\\</code>, also known as the escape character, followed by one or more additional characters.</p>\n<p>The escape sequence for a newline character is <code>\\n</code>.</p>\n<p>Another escape sequence is <code>\\t</code>. The <code>\\t</code> represrents a tab character, and will insert a space within a string.</p>\n<h3 id=\"heading-how-to-compile-and-run-your-first-c-program\"><strong>How to Compile and Run Your first C Program</strong></h3>\n<p>In the previous section, you wrote your first C program:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-comment\">// output 'Hello, world!' to the console</span>\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Hello, world!\\n\"</span>);\n}\n</code></pre>\n<p>Any code you write in the C programming language is called source code.</p>\n<p>Your computer doesn’t understand any of the C statements you have written, so this source code needs to be translated into a different format that the computer can understand. Here is where the compiler you installed earlier comes in handy.</p>\n<p>The compiler will read the program and translate it into a format closer to the computer’s native language and make your program suitable for execution.</p>\n<p>You will be able to see the output of your program, which should be <code>Hello, world!</code>.</p>\n<p>The compilation of a C program consists of four steps: preprocessing, compilation, assembling, and linking.</p>\n<p>The first step is preprocessing.</p>\n<p>The preprocessor scans through the source code to find preprocessor directives, which are any lines that start with a <code>#</code> symbol, such as <code>#include</code> .</p>\n<p>Once the preprocessor finds these lines, it substitutes them with something else.</p>\n<p>For example, when the preprocessor finds the line <code>#include &lt;stdio.h&gt;</code>, the <code>#include</code> tells the preprocessor to include all the code from the <code>stdio.h</code> header file.</p>\n<p>So, it replaces the <code>#include &lt;stdio.h&gt;</code> line with the actual contents of the <code>stdio.h</code> file.</p>\n<p>The output of this phase is a modified version of the source code.</p>\n<p>After preprocessing, the next step is the compilation phase, where the modified source code gets translated into the corresponding assembly code.</p>\n<p>If there are any errors, compilation will fail, and you will need to fix the errors to continue.</p>\n<p>The next step is the assembly phase, where the assembler converts the generated assembly code statements into machine code instructions.</p>\n<p>The output of this phase is an object file, which contains the machine code instructions.</p>\n<p>The last step is the linking phase.</p>\n<p>Linking is the process of combining the object file generated from the assembly phase with any necessary libraries to create the final executable binary file.</p>\n<p>Now, let’s go over the commands you need to enter to compile your <code>main.c</code> file.</p>\n<p>In Visual Studio Code, open the built-in terminal by selecting \"Terminal\" -&gt; \"New Terminal\".</p>\n<p>Inside the terminal, enter the following command:</p>\n<pre><code class=\"lang-plaintext\">gcc main.c\n</code></pre>\n<p>The <code>gcc</code> part of the command refers to the C compiler, and <code>main.c</code> is the file that contains the C code that you want to compile.</p>\n<p>Next, enter the following command:</p>\n<pre><code class=\"lang-plaintext\">ls\n</code></pre>\n<p>The <code>ls</code> command lists the contents of the current directory.</p>\n<pre><code class=\"lang-plaintext\">a.out  main.c\n</code></pre>\n<p>The output of this command shows an <code>a.out</code> file – this is the executable file containing the source code statements in their corresponding binary instructions.</p>\n<p>The <code>a.out</code> is the default name of the executable file created during the compilation process.</p>\n<p>To run this file, enter the following command:</p>\n<pre><code class=\"lang-plaintext\">./a.out\n</code></pre>\n<p>This command tells the computer to look in the current directory, <code>./</code>, for a file named <code>a.out</code>.</p>\n<p>The above command generates the following output:</p>\n<pre><code class=\"lang-plaintext\">Hello, world!\n</code></pre>\n<p>You also have the option to name the executable file instead of leaving it with the default <code>a.out</code> name.</p>\n<p>Say you wanted to name the executable file <code>helloWorld</code>.</p>\n<p>If you wanted to do this, you would need to enter the following command:</p>\n<pre><code class=\"lang-plaintext\">gcc -o helloWorld main.c\n</code></pre>\n<p>This command with the <code>-o</code> option (which stands for output) tells the <code>gcc</code> compiler to create an executable file named <code>helloWorld</code>.</p>\n<p>To run the new executable file that you just created, enter the following command:</p>\n<pre><code class=\"lang-plaintext\">./helloWorld\n</code></pre>\n<p>This is the output of the above command:</p>\n<pre><code class=\"lang-plaintext\">Hello, world!\n</code></pre>\n<p>Note that whenever you make a change to your source code file, you have to repeat the process of compiling and running your program from the beginning to see the changes you made.</p>\n<h2 id=\"heading-chapter-2-variables-and-data-types\"><strong>Chapter 2: Variables and Data Types</strong></h2>\n<p>In this chapter, you will learn the basics of variables and data types – the fundamental storage units that allow you to preserve and manipulate data in your programs.</p>\n<p>By the end of this chapter, you will know how to declare and initialize variables.</p>\n<p>You will also have learned about various data types available in C, such as integers, floating-point numbers, and characters, which dictate how information is processed and stored within a program's memory.</p>\n<p>Finally, you'll have learned how to receive user input in your programs, and how to use constants to store values that you don't want to be changed.</p>\n<h3 id=\"heading-what-is-a-variable-in-c\"><strong>What Is a Variable in C?</strong></h3>\n<p>Variables store different kind of data in the computer's memory, and take up a certain amount of space.</p>\n<p>By storing information in a variable, you can retrieve and manipule it, perform various calculations, or even use it to make decisions in your program.</p>\n<p>The stored data is given a name, and that is how you are able to access it when you need it.</p>\n<h3 id=\"heading-how-to-declare-variables-in-c\"><strong>How to Declare Variables in C</strong></h3>\n<p>Before you can use a variable, you need to declare it – this step lets the compiler know that it should allocate some memory for it.</p>\n<p>C is a strongly typed language, so to declare a variable in C, you first need to specify the type of data the variable will hold, such as an integer to store a whole number, a floating-point number for numbers with decimal places, or a char for a single character.</p>\n<p>That way, during compilation time, the compiler knows if the variable is able to perform the actions it was set out to do.</p>\n<p>Once you have specified the data type, you give the variable a name.</p>\n<p>The general syntax for declaring variables looks something like this:</p>\n<pre><code class=\"lang-plaintext\">data_type variable_name;\n</code></pre>\n<p>Let's take the following example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> age;\n}\n</code></pre>\n<p>In the example above, I declared a variable named <code>age</code> that will hold integer values.</p>\n<h4 id=\"heading-what-are-the-naming-conventions-for-variables-in-c\"><strong>What Are the Naming Conventions for Variables in C?</strong></h4>\n<p>When it comes to variable names, they must begin either with a letter or an underscore.</p>\n<p>For example, <code>age</code> and <code>_age</code> are valid variable names.</p>\n<p>Also, they can contain any uppercase or lowercase letters, numbers, or an underscore character. There can be no other special symbols besides an underscore.</p>\n<p>Lastly, variable names are case-sensitive. For example, <code>age</code> is different from <code>Age</code>.</p>\n<h3 id=\"heading-how-to-initialize-variables-in-c\"><strong>How to Initialize Variables in C</strong></h3>\n<p>Once you've declared a variable, it is a good practice to intialize it, which involves assigning an initial value to the variable.</p>\n<p>The general syntax for initialzing a variable looks like this:</p>\n<pre><code class=\"lang-plaintext\">data_type variable_name = value;\n</code></pre>\n<p>The assignment operator, <code>=</code>, is used to assign the <code>value</code> to the <code>variable_name</code>.</p>\n<p>Let's take the previous example and assign <code>age</code> a value:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> age;\n\n    age = <span class=\"hljs-number\">29</span>;\n}\n</code></pre>\n<p>I initialized the variable <code>age</code> by assigning it an integer value of <code>29</code>.</p>\n<p>With that said, you can combine the initialization and declaration steps instead of performing them separately:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-comment\">// declaration + initialization</span>\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">29</span>;\n}\n</code></pre>\n<h3 id=\"heading-how-to-update-variable-values-in-c\"><strong>How to Update Variable Values in C</strong></h3>\n<p>The values of variables can change.</p>\n<p>For example, you can change the value of <code>age</code> without having to specify its type again.</p>\n<p>Here is how you would change its value from <code>29</code> to <code>30</code>:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-comment\">// the variable age with its original value</span>\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">29</span>;\n\n    <span class=\"hljs-comment\">// changing the value of age</span>\n    <span class=\"hljs-comment\">// the new value will be 30</span>\n    age = <span class=\"hljs-number\">30</span>;\n}\n</code></pre>\n<p>Note that the data type of the new value being assigned must match the declared data type of the variable.</p>\n<p>If it doesn't, the program will not run as expected. The compiler will raise an error during compilation time.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">29</span>;\n\n    <span class=\"hljs-comment\">/*\n    trying to assign a floating-point value\n    to a variable with type int\n    will cause an error in your program\n    */</span>\n    age = <span class=\"hljs-number\">29.5</span>;\n}\n</code></pre>\n<h3 id=\"heading-what-are-the-basic-data-types-in-c\"><strong>What Are the Basic Data Types in C?</strong></h3>\n<p>Data types specify the type of form that information can have in C programs. And they determine what kind of operations can be performed on that information.</p>\n<p>There are various built-in data types in C such as <code>char</code>, <code>int</code>, and <code>float</code>.</p>\n<p>Each of the data types requires different allocation of memory.</p>\n<p>Before exploring each one in more detail, let’s first go over the difference between signed and unsigned data types in C.</p>\n<p>Signed data types can represent both positive and negative values.</p>\n<p>On the other hand, unsigned data types can represent only non-negative values (zero and positive values).</p>\n<p>Wondering when to use signed and when to use unsigned data types?</p>\n<p>Use signed data types when you need to represent both positive and negative values, such as when working with numbers that can have positive and negative variations.</p>\n<p>And use unsigned data types when you want to ensure that a variable can only hold non-negative values, such as when dealing with quantities.</p>\n<p>Now, let's look at C data types in more detail.</p>\n<h4 id=\"heading-what-is-thechar-data-type-in-c\"><strong>What Is the</strong><code>char</code> Data Type in C?</h4>\n<p>The most basic data type in C is <code>char</code>.</p>\n<p>It stands for \"character\" and it is one of the simplest and most fundamental data types in the C programming language.</p>\n<p>You use it to store a single individual character such as an uppercase and lowercase letter of the ASCII (American Standard Code for Information Interchange) chart.</p>\n<p>Some examples of <code>char</code>s are <code>'a'</code> and <code>'Z'</code>.</p>\n<p>It can also store symbols such as <code>'!'</code>, and digits such as <code>'7'</code>.</p>\n<p>Here is an example of how to create a variable that will hold a <code>char</code> value:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">char</span> initial = <span class=\"hljs-string\">'D'</span>;\n\n }\n</code></pre>\n<p>Notice how I used single quotation marks around the single character.</p>\n<p>This is because you can't use double quotes when working with <code>char</code>s.</p>\n<p>Double quotes are used for strings.</p>\n<p>Regarding memory allocation, a signed <code>char</code> lets you store numbers ranging from <code>[-128 to 127</code>], and uses at least 1 byte (or 8 bits) of memory.</p>\n<p>An unsigned char stores numbers ranging from <code>[0 to 255]</code>.</p>\n<h4 id=\"heading-what-is-theint-data-type-in-c\"><strong>What Is the</strong><code>int</code> Data Type in C?</h4>\n<p>An <code>int</code> is a an integer, which is also known as a whole number.</p>\n<p>It can hold a positive or negative value or <code>0</code>, but it can't hold numbers that contain decimal points (like <code>3.5</code>).</p>\n<p>Some examples of integers are <code>0</code>, <code>-3</code>,and <code>9</code>.</p>\n<p>Here is how you create a variable that will hold an <code>int</code> value:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">29</span>;\n }\n</code></pre>\n<p>When you declare an <code>int</code>, the computer allocates at least 2 bytes (or 16 bits) of memory.</p>\n<p>With that said, on most modern systems, an <code>int</code> typically allocates 4 bytes (or 32 bits) of memory.</p>\n<p>The range of available numbers for a signed <code>int</code> is <code>[-32,768 to 32,767]</code> when it takes up 2 bytes and <code>[-2,147,483,648 to 2,147,483,647]</code> when it takes up 4 bytes of memory.</p>\n<p>The range of numbers for an unsigned <code>int</code> doesn't include any of the negative numbers in the range mentioned for signed <code>int</code>s.</p>\n<p>So, the range of numbers for unsigned <code>ints</code> that take up 2 bytes of memory is <code>[0 to 65,535]</code> and the range is <code>[0 to 4,294,967,295]</code> for those that take up 4 bytes.</p>\n<p>To represent smaller numbers, you can use another data type – the <code>short int</code>. It typically takes up 2 bytes (or 16 bits) of memory.</p>\n<p>A signed <code>short int</code> allows for numbers in a range from <code>[-32,768 to 32,767]</code>.</p>\n<p>An unsigned <code>short int</code> allows for numbers in a range from <code>[0 to 65,535]</code>.</p>\n<p>Use a <code>short</code> when you want to work with smaller integers, or when memory optimisation is critically important.</p>\n<p>If you need to work with larger integers, you can also use other data types like <code>long int</code> or <code>long long int</code>, which provide a larger range and higher precision.</p>\n<p>A <code>long int</code> typically takes up at least 4 bytes of memory (or 32 bits).</p>\n<p>The values for a signed <code>long int</code> range from <code>[-2,147,483,648 to 2,147,483,647]</code>.</p>\n<p>And the values for an unsigned <code>long int</code> range from <code>[0 to 4,294,967,295]</code>.</p>\n<p>The <code>long long int</code> data type is able to use even larger numbers than a <code>long int</code>. It usually takes up 8 bytes (or 64 bits) of memory.</p>\n<p>A signed <code>long long int</code> allows for a range from <code>[-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807]</code></p>\n<p>And an unsigned <code>long long int</code> has a range of numbers from <code>[0 to 18,446,744,073,709,551,615]</code>.</p>\n<h4 id=\"heading-what-is-thefloat-data-type-in-c\"><strong>What Is The</strong><code>float</code> Data Type in C?</h4>\n<p>The <code>float</code> data type is used to hold numbers with a decimal value (which are also known as real numbers).</p>\n<p>It holds 4 bytes (or 32 bits) of memory and it is a single-precision floating-point type.</p>\n<p>Here is how you create a variable that will hold a <code>float</code> value:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n   <span class=\"hljs-keyword\">float</span> temperature = <span class=\"hljs-number\">68.5</span>;\n }\n</code></pre>\n<p>A <code>double</code> is a floating point value and is the most commonly used floating-point data type in C.</p>\n<p>It holds 8 bytes (or 64 bits) of memory, and it is a double-precision floating-point type.</p>\n<p>Here is how you create a variable that will hold a <code>double</code> value:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">double</span> number = <span class=\"hljs-number\">3.14159</span>;\n }\n</code></pre>\n<p>When choosing which floating-point data type to use, consider the trade-off between memory usage and precision.</p>\n<p>A <code>float</code> has less precision that a <code>double</code> but consumes less memory.</p>\n<p>Use a <code>float</code> when memory usage is a concern (such as when working with a system with limited resources) or when you need to perform calculations where high precision is not critical.</p>\n<p>If you require higher precision and accuracy for your calculations and memory usage is not critical, you can use a <code>double</code>.</p>\n<h3 id=\"heading-what-are-format-codes-in-c\"><strong>What Are Format Codes in C?</strong></h3>\n<p>Format codes are used in input and output functions, such as <code>scanf()</code> and <code>printf()</code>, respectively.</p>\n<p>They act as placeholders and substitutes for variables.</p>\n<p>Specifically, they specify the expected format of input and output.</p>\n<p>They tell the program how to format or interpret the data being passed to or read from the <code>scanf()</code> and <code>printf()</code> functions.</p>\n<p>The syntax for format codes is the <code>%</code> character and the format specifier for the data type of the variable.</p>\n<p>Let's take the following example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">29</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"My age is %i\\n\"</span>, age);  <span class=\"hljs-comment\">// My age is 29</span>\n}\n</code></pre>\n<p>In the example above, <code>age</code> is the variable in the program. It is of type <code>int</code>.</p>\n<p>The format code – or placeholder – for integer values is <code>%i</code>. This indicates that an integer should be printed.</p>\n<p>In the program's output, <code>%i</code> is replaced with the value of <code>age</code>, which is <code>29</code>.</p>\n<p>Here is a table with the format specifiers for each data type:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>FORMAT SPECIFIER</strong></td><td><strong>DATA TYPE</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td><td>char</td></tr>\n<tr>\n<td>%c</td><td>unsigned char</td></tr>\n<tr>\n<td>%i, &amp;d</td><td>int</td></tr>\n<tr>\n<td>%u</td><td>unsigned int</td></tr>\n<tr>\n<td>%hi, %hd</td><td>short int</td></tr>\n<tr>\n<td>%hu</td><td>unsigned short int</td></tr>\n<tr>\n<td>%li or %ld</td><td>long int</td></tr>\n<tr>\n<td>%lu</td><td>unsigned long int</td></tr>\n<tr>\n<td>%lli or %lld</td><td>long long int</td></tr>\n<tr>\n<td>%llu</td><td>unsigned long long int</td></tr>\n<tr>\n<td>%f</td><td>float</td></tr>\n<tr>\n<td>%lf</td><td>double</td></tr>\n<tr>\n<td>%Lf</td><td>long double</td></tr>\n</tbody>\n</table>\n</div><h3 id=\"heading-how-to-recieve-user-input-using-thescanf-function\"><strong>How to Recieve User Input Using the</strong><code>scanf()</code> Function</h3>\n<p>Earlier you saw how to print something to the console using the <code>printf()</code> function.</p>\n<p>But what happens when you want to receive user input? This is where the <code>scanf()</code> function comes in.</p>\n<p>The <code>scanf()</code> function reads user input, which is typically entered via a keyboard.</p>\n<p>The user enters a value, presses the Enter key, and the value is saved in a variable.</p>\n<p>The general syntax for using <code>scanf()</code> looks something similar to the following:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"format_string\"</span>, &amp;variable);\n</code></pre>\n<p>Let's break it down:</p>\n<ul>\n<li><p><code>format_string</code> is the string that lets the computer know what to expect. It specifies the expected format of the input. For example, is it a word, a number, or something else?</p>\n</li>\n<li><p><code>&amp;variable</code> is the pointer to the variable where you want to store the value gathered from the user input.</p>\n</li>\n</ul>\n<p>Let's take a look at an example of <code>scanf()</code> in action:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-keyword\">int</span> number;\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Please enter your age: \"</span>);\n\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%i\"</span>, &amp;number);\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Your age is %i\\n\"</span>, number);\n}\n</code></pre>\n<p>In the example above, I first have to include the <code>stdio.h</code> header file, which provides input and output functions in C.</p>\n<p>Then, in the <code>main()</code> function, I declare a variable named <code>number</code> that will hold integer values. This variable will store the user input.</p>\n<p>Then, I prompt the user to enter a number using the <code>printf()</code> function.</p>\n<p>Next, I use <code>scanf()</code> to read and save the value that the user enters.</p>\n<p>The format specifier <code>%i</code> lets the computer known that it should expect an integer input.</p>\n<p>Note also the <code>&amp;</code> symbol before the variable name. Forgetting to add it will cause an error.</p>\n<p>Lastly, after receiving the input, I display the received value to the console using another <code>printf()</code> function.</p>\n<h3 id=\"heading-what-are-constants-in-c\"><strong>What are Constants in C?</strong></h3>\n<p>As you saw earlier on, variable values can be changed throughout the life of a program.</p>\n<p>With that said, there may be times when you don’t want a value to be changed. This is where constants come in handy.</p>\n<p>In C, a constant is a variable with a value that cannot be changed after declaration and during the program's execution.</p>\n<p>You can create a constant in a similar way to how you create variables.</p>\n<p>The differences between constants and variables is that with constants you have to use the <code>const</code> keyword before mentioning the data type.</p>\n<p>And when working with constants, you should always specify a value.</p>\n<p>The general syntax for declaring constants in C looks like this:</p>\n<pre><code class=\"lang-plaintext\">const data_type constant_name = value;\n</code></pre>\n<p>Here, <code>data_type</code> represents the data type of the constant, <code>constant_name</code> is the name you choose for the constant, and <code>value</code> is the value of the constant.</p>\n<p>It is also best practice to use all upper case letters when declaring a constant’s name.</p>\n<p>Let’s see an example of how to create a constant in C:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> LUCKY_NUM = <span class=\"hljs-number\">7</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"My lucky number is: %i\\n\"</span>, LUCKY_NUM);\n}\n</code></pre>\n<p>In this example, <code>LUCKY_NUM</code> is defined as a constant with a value of <code>7</code>.</p>\n<p>The constant's name, <code>LUCKY_NUM</code>, is in uppercase letters, as this is a best practice and convention that improves the readability of your code and distinguishes constants from variables.</p>\n<p>Once defined, it cannot be modified in the program.</p>\n<p>If you try to change its value, the C compiler will generate an error indicating that you are attempting to modify a constant.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> LUCKY_NUM = <span class=\"hljs-number\">7</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"My lucky number is: %i\\n\"</span>, LUCKY_NUM);\n\n    LUCKY_NUM = <span class=\"hljs-number\">13</span>; <span class=\"hljs-comment\">// this will cause an error</span>\n\n}\n</code></pre>\n<h2 id=\"heading-chapter-3-operators\"><strong>Chapter 3: Operators</strong></h2>\n<p>Operators are essential building blocks in all programming languages.</p>\n<p>They let you perform various operations on variables and values using symbols.</p>\n<p>And they let you compare variables and values against each other for decision-making computatons.</p>\n<p>In this chapter, you will learn about the most common operators in C programming.</p>\n<p>You will first learn about arithmetic operators, which allow you to perform basic mathematical calculations.</p>\n<p>You will then learn about relational (also known as comparisson operators), which help you compare values.</p>\n<p>And you will learn about logical operators, which allow you to make decisions based on conditions.</p>\n<p>After understanding these fundamental operators, you'll learn about some additional operators, such as assignment operators, and increment and decrement operators.</p>\n<p>By the end of this chapter, you will have a solid grasp of how to use different operators to manipulate data.</p>\n<h3 id=\"heading-what-are-the-arithmetic-operators-in-c\"><strong>What Are the Arithmetic Operators in C?</strong></h3>\n<p>Arithmetic operators are used to perform basic arithmetic operations on numeric data types.</p>\n<p>Operations include addition, subtraction, multiplication, division, and calculating the remainder after division.</p>\n<p>These are the main arithmetic operators in C:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>OPERATOR</strong></td><td><strong>OPERATION</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td><td>Addition</td></tr>\n<tr>\n<td>-</td><td>Subtraction</td></tr>\n<tr>\n<td>*</td><td>Multiplication</td></tr>\n<tr>\n<td>/</td><td>Division</td></tr>\n<tr>\n<td>%</td><td>Remainder after division (modulo)</td></tr>\n</tbody>\n</table>\n</div><p>Let's see examples of each one in action.</p>\n<h4 id=\"heading-how-to-use-the-addition-operator\"><strong>How to Use the Addition (</strong><code>+</code>) Operator</h4>\n<p>The addition operator adds two operands together and returns their sum.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">int</span> sum = a + b;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Sum: %i\\n\"</span>, sum); <span class=\"hljs-comment\">// Output: Sum: 8</span>\n}\n</code></pre>\n<h4 id=\"heading-how-to-use-the-subtraction-operator\"><strong>How to Use the Subtraction (</strong><code>-</code>) Operator</h4>\n<p>The subtraction operator subtracts the second operand from the first operand and returns their difference.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>; \n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> difference = a - b;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Difference: %i\\n\"</span>, difference); <span class=\"hljs-comment\">// Output: Difference: 5</span>\n}\n</code></pre>\n<h4 id=\"heading-how-to-use-the-multiplication-operator\"><strong>How to Use the Multiplication (</strong><code>*</code>) Operator</h4>\n<p>The multiplication operator multiplies two operands and returns their product.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">4</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">int</span> product = a * b;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Product: %i\\n\"</span>, product); <span class=\"hljs-comment\">// Output: Product: 12</span>\n}\n</code></pre>\n<h4 id=\"heading-how-to-use-the-division-operator\"><strong>How to Use the Division (</strong><code>/</code>) Operator</h4>\n<p>The division operator divides the first operand by the second operand and returns their quotient.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-keyword\">int</span> quotient = a / b;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Quotient: %i\\n\"</span>, quotient); <span class=\"hljs-comment\">// Output: Quotient: 5</span>\n}\n</code></pre>\n<h4 id=\"heading-how-to-use-the-modulo-operator\"><strong>How to Use the Modulo (</strong><code>%</code>) Operator</h4>\n<p>The modulo operator returns the remainder of the first operand when divided by the second operand.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">int</span> remainder = a % b;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Remainder: %i\\n\"</span>, remainder); <span class=\"hljs-comment\">// Output: Remainder: 1</span>\n}\n</code></pre>\n<p>The modulo operator is commonly used to determine whether an integer is even or odd.</p>\n<p>If the remainder of the operation is <code>1</code>, then the integer is odd. If there is no remainder, then the integer is even.</p>\n<h3 id=\"heading-what-are-the-relational-operators-in-c\"><strong>What Are The Relational Operators in C?</strong></h3>\n<p>Relational operators are used to compare values and return a result.</p>\n<p>The result is a Boolean value. A Boolean value is either <code>true</code> (represented by <code>1</code>) or <code>false</code> (represented by <code>0</code>).</p>\n<p>These operators are commonly used in decision-making statements such as <code>if</code> statements, and <code>while</code> loops.</p>\n<p>These are the relational operators in C:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>OPERATOR</strong></td><td><strong>NAME OF OPERATOR</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>\\==</td><td>Equal to</td></tr>\n<tr>\n<td>!=</td><td>Not equal to</td></tr>\n<tr>\n<td>&gt;</td><td>Greater than</td></tr>\n<tr>\n<td>&lt;</td><td>Less than</td></tr>\n<tr>\n<td>&gt;=</td><td>Greater than or equal to</td></tr>\n<tr>\n<td>&lt;=</td><td>Less than or equal to</td></tr>\n</tbody>\n</table>\n</div><p>Let’s see an example of each one in action.</p>\n<h4 id=\"heading-how-to-use-the-equal-to-operator\"><strong>How to Use the Equal to (</strong><code>==</code>) Operator</h4>\n<p>The equal to operator checks if two values are equal.</p>\n<p>It essentially asks the question, \"Are these two values equal?\"</p>\n<p>Note that you use the comparisson operator (two equal signs – <code>==</code>) and not the assignment operator (<code>=</code>) which is used for assigning a value to a variable.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> result = (a == b);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Output: Result: 1</span>\n}\n</code></pre>\n<p>The result is <code>1</code> (true), because <code>a</code> and <code>b</code> are equal.</p>\n<h4 id=\"heading-how-to-use-the-not-equal-to-operator\"><strong>How to Use the Not equal to (</strong><code>!=</code>) Operator</h4>\n<p>The not equal to operator checks if two values are NOT equal.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span>; \n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">int</span> result = (a != b);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Output: Result: 1</span>\n}\n</code></pre>\n<p>The result is <code>1</code> (true), because <code>a</code> and <code>b</code> are not equal.</p>\n<h4 id=\"heading-how-to-use-the-greater-than-gt-operator\"><strong>How to Use the Greater than (</strong><code>&gt;</code>) Operator</h4>\n<p>This operator compares two values to check if one is greater than the other.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">int</span>  b = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> result = (a &gt; b);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Output: Result: 1</span>\n}\n</code></pre>\n<p>The result is <code>1</code> (true), because <code>a</code> is greater than <code>b</code>.</p>\n<h4 id=\"heading-how-to-use-the-less-than-lt-operator\"><strong>How to Use the Less than (</strong><code>&lt;</code>) Operator</h4>\n<p>This operator compares two values to check if one is less than the other.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> result = (a &lt; b);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Output: Result: 0</span>\n}\n</code></pre>\n<p>The result is <code>0</code> (false), because <code>a</code> is not less than <code>b</code>.</p>\n<h4 id=\"heading-how-to-use-the-greater-than-or-equal-to-gt-operator\"><strong>How to Use the Greater than or Equal to (</strong><code>&gt;=</code>) Operator</h4>\n<p>This operator compares two values to check if one is greater than or equal to the other.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span>  b = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> result = (a &gt;= b);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Output: Result: 1</span>\n}\n</code></pre>\n<p>The result is <code>1</code> (true), because <code>a</code> is equal to <code>b</code>.</p>\n<h4 id=\"heading-how-to-use-the-less-than-or-equal-to-lt-operator\"><strong>How to Use the Less than or equal to (</strong><code>&lt;=</code>) Operator</h4>\n<p>This operator compares two values to check if one is less than or equal the other.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">int</span> result = (a &lt;= b);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Output: Result: 1</span>\n}\n</code></pre>\n<p>The result is <code>1</code> (true), because <code>a</code> is less than <code>b</code>.</p>\n<h3 id=\"heading-logical-operators\"><strong>Logical Operators</strong></h3>\n<p>Logical operators operate on Boolean values and return a Boolean value.</p>\n<p>Here are the logical operators used in C:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>OPERATOR</strong></td><td><strong>NAME OF OPERATOR</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;&amp;</code></td><td>Logical AND</td></tr>\n<tr>\n<td>`</td><td></td></tr>\n<tr>\n<td><code>!</code></td><td>Logical NOT</td></tr>\n</tbody>\n</table>\n</div><p>Let's go into more detail on each one in the following sections.</p>\n<h4 id=\"heading-how-to-use-the-and-ampamp-operator\"><strong>How to Use the AND (</strong><code>&amp;&amp;</code>) Operator</h4>\n<p>The logical AND (<code>&amp;&amp;</code>) operator checks whether all operands are <code>true</code>.</p>\n<p>The result is <code>true</code> only when all operands are <code>true</code>.</p>\n<p>Here is the truth table for the AND (<code>&amp;&amp;</code>) operator when you are working with two operands:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>FIRST OPERAND</strong></td><td><strong>SECOND OPERAND</strong></td><td><strong>RESULT</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>true</td><td>true</td><td>true</td></tr>\n<tr>\n<td>true</td><td>false</td><td>false</td></tr>\n<tr>\n<td>false</td><td>true</td><td>false</td></tr>\n<tr>\n<td>false</td><td>false</td><td>false</td></tr>\n</tbody>\n</table>\n</div><p>Let's take the following example:</p>\n<p>The result of <code>(10 == 10) &amp;&amp; (20 == 20)</code> is <code>true</code> because both operands are <code>true</code>.</p>\n<p>Let's look at another example:</p>\n<p>The result of <code>(10 == 20) &amp;&amp; (20 == 20)</code> is <code>false</code> because one of the operands is <code>false</code>.</p>\n<p>When the first operand is <code>false</code>, the second operand is not evaluated (since there's no point - it's already determined that the first operand is false, so the result can only be <code>false</code>).</p>\n<h4 id=\"heading-how-to-use-the-or-operator\"><strong>How to Use the OR (</strong><code>||</code>) Operator</h4>\n<p>The logical OR (<code>||</code>) operator checks if at least one of the operands is <code>true</code>.</p>\n<p>The result is <code>true</code> only when at least one of the operands is <code>true</code>.</p>\n<p>Here is the truth table for the OR (<code>||</code>) operator when you are working with two operands:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>FIRST OPERAND</strong></td><td><strong>SECOND OPERAND</strong></td><td><strong>RESULT</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>true</td><td>true</td><td>true</td></tr>\n<tr>\n<td>true</td><td>false</td><td>true</td></tr>\n<tr>\n<td>false</td><td>true</td><td>true</td></tr>\n<tr>\n<td>false</td><td>false</td><td>false</td></tr>\n</tbody>\n</table>\n</div><p>Let's look at an example:</p>\n<p>The result of <code>(10 == 20) || (20 == 20)</code> is <code>true</code> because one of the operands is <code>true</code>.</p>\n<p>Let's look at another example:</p>\n<p>The result of <code>(20 == 20) || (10 == 20)</code> is <code>true</code> because one of the operands is <code>true</code></p>\n<p>If the first operand is <code>true</code>, then the second operator is not evaluated.</p>\n<h3 id=\"heading-how-to-use-the-not-operator\"><strong>How to Use the NOT (</strong><code>!</code>) Operator</h3>\n<p>The logical NOT (<code>!</code>) operator negates the operand.</p>\n<p>If the operand is <code>true</code>, it returns <code>false</code>.</p>\n<p>And if it is <code>false</code>, it returns <code>true</code>.</p>\n<p>You may want to use the NOT operator when when you want to flip the value of a condition and return the opposite of what the condition evaluates to.</p>\n<p>Here is the truth table for the NOT(<code>!</code>) operator:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>OPERAND</strong></td><td><strong>RESULT</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>true</td><td>false</td></tr>\n<tr>\n<td>false</td><td>true</td></tr>\n</tbody>\n</table>\n</div><p>Let's look at an example:</p>\n<p>The result of <code>!(10 == 10)</code> is <code>false</code>.</p>\n<p>The condition <code>10 == 10</code> is <code>true</code>, but the <code>!</code> operator negates it so the result is <code>false</code>.</p>\n<p>And let's look at another example:</p>\n<p>The result of <code>!(10 == 20)</code> is <code>true</code>.</p>\n<p>The condition <code>10 == 20</code> is false, but the <code>!</code> operator negates it.</p>\n<h3 id=\"heading-what-is-the-assignement-operator-in-c\"><strong>What Is the Assignement Operator in C?</strong></h3>\n<p>The assignment operator is used to assign a value to a variable.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-comment\">// declare an integer variable named num</span>\n    <span class=\"hljs-keyword\">int</span> num;\n\n    <span class=\"hljs-comment\">// assign the value 10 to num</span>\n    num = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"num: %i\\n\"</span>, num); <span class=\"hljs-comment\">// Output: num: 10</span>\n\n}\n</code></pre>\n<p>In the example above, the value <code>10</code> is assigned to the variable <code>num</code> using the assignment operator.</p>\n<p>The assignment operator works by evaluating the expression on the right-hand side and then storing its result in the variable on the left-hand side.</p>\n<p>The type of data assigned should match the data type of the variable.</p>\n<h4 id=\"heading-how-to-use-compound-assignment-operators\"><strong>How to Use Compound Assignment Operators</strong></h4>\n<p>Compound assignment operators are shorthand notations.</p>\n<p>They allow you to modify a variable by performing an operation on it and then storing the result of the operation back into the same variable in a single step.</p>\n<p>This can make your code more concise and easier to read.</p>\n<p>Some common compound assignment operators in C include:</p>\n<ul>\n<li><p><code>+=</code>: Addition and assignment</p>\n</li>\n<li><p><code>=</code>: Subtraction and assignment</p>\n</li>\n<li><p><code>=</code>: Multiplication and assignment</p>\n</li>\n<li><p><code>/=</code>: Division and assignment</p>\n</li>\n<li><p><code>%=</code>: Modulo and assignment</p>\n</li>\n</ul>\n<p>Let’s see an example of how the <code>+=</code> operator works:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">10</span>;\n\n  num += <span class=\"hljs-number\">5</span>; \n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Num: %i\\n\"</span>, num); <span class=\"hljs-comment\">// Num: 15</span>\n}\n</code></pre>\n<p>In the example above, I created a variable named <code>num</code> and assigned it an initial value of <code>10</code>.</p>\n<p>I then wanted to increment the variable by <code>5</code>. To do this, I used the <code>+=</code> compound operator.</p>\n<p>The line <code>num += 5</code> increments the value of <code>num</code> by 5, and the result (15) is stored back into <code>num</code> in one step.</p>\n<p>Note that the <code>num += 5;</code> line works exactly the same as doing <code>num = num + 5</code>, which would mean <code>num = 10 + 5</code>, but with fewer lines of code.</p>\n<h3 id=\"heading-what-are-the-increment-and-decrement-operators-in-c\"><strong>What Are the Increment and Decrement Operators in C?</strong></h3>\n<p>The increment <code>++</code> and decrement <code>--</code> operators increment and decrement a variable by one, respectively.</p>\n<p>Let’s look at an example of how to use the <code>++</code> operator:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">10</span>;\n  num++;\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Num: %i\\n\"</span>, num); <span class=\"hljs-comment\">// Num: 11</span>\n\n}\n</code></pre>\n<p>The initial value of the variable <code>num</code> is <code>10</code>.</p>\n<p>By using the <code>++</code> increment operator, the value of <code>num</code> is set to <code>11</code>.</p>\n<p>This is like perfoming <code>num = num + 1</code> but with less code.</p>\n<p>The shorthand for decrementing a variable by one is <code>--</code>.</p>\n<p>If you wanted to decrement <code>num</code> by one, you would do the following:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">10</span>;\n  num--;\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Num: %i\\n\"</span>, num); <span class=\"hljs-comment\">// Num: 9</span>\n\n}\n</code></pre>\n<p>The initial value of the variable <code>num</code> is <code>10</code>.</p>\n<p>By using the <code>--</code> increment operator, the value of <code>num</code> is now set to <code>9</code>.<br />This is like perfoming <code>num = num - 1</code>.</p>\n<h2 id=\"heading-chapter-4-conditional-statements\"><strong>Chapter 4: Conditional Statements</strong></h2>\n<p>The examples you have seen so far all execute line by line, from top to bottom.</p>\n<p>They are not flexible and dynamic and do not adapt according to user behavior or specific situations.</p>\n<p>In this chapter, you will learn how to make decisions and control the flow of a program.</p>\n<p>You get to set the rules on what happens next in your programs by setting conditions using conditional statements.</p>\n<p>Conditional statements take a specific action based on the result of a comparisson that takes place.</p>\n<p>The program will decide what the next steps should be based on whether the conditions are met or not.</p>\n<p>Certain parts of the program may not run depending on the results or depending on certain user input. The user can go down different paths depending on the various forks in the road that come up during a program's life.</p>\n<p>First, you will learn about the <code>if</code> statement – the foundational building block of decision-making in C.</p>\n<p>You will also learn about the <code>else if</code> and <code>else</code> statements that are added to the <code>if</code> statement to provide additional flexibility to the program.</p>\n<p>You will then learn about the ternary operator which allows you to condense decision-making logic into a single line of code and improve the readability of your program.</p>\n<h3 id=\"heading-how-to-create-anif-statement-in-c\"><strong>How to Create an</strong><code>if</code> statement in C</h3>\n<p>The most basic conditional statement in C is the <code>if</code> statement.</p>\n<p>It makes a decision based on a condition.</p>\n<p>If the given condition evaluates to <code>true</code> only then is the code inside the <code>if</code> block executed.</p>\n<p>If the given condition evaluates to <code>false</code>, the code inside the <code>if</code> block is ignored and skipped.</p>\n<p>The general syntax for an <code>if</code> statement in C is the following:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">if</span> (condition) {\n  <span class=\"hljs-comment\">// run this code if condition is true</span>\n}\n</code></pre>\n<p>Let's look at an example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-comment\">// variable age</span>\n   <span class=\"hljs-keyword\">int</span> age;\n\n   <span class=\"hljs-comment\">// prompt user to enter their age</span>\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Please enter your age: \"</span>);\n\n   <span class=\"hljs-comment\">// store user's answer in the variable</span>\n   <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%i\"</span>, &amp;age);\n\n    <span class=\"hljs-comment\">// check if age is less than 18</span>\n    <span class=\"hljs-comment\">// if it is, then and only then, print a message to the console</span>\n\n   <span class=\"hljs-keyword\">if</span> (age &lt; <span class=\"hljs-number\">18</span>) {\n       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You need to be over 18 years old to continue\\\\n\"</span>);\n   }\n}\n</code></pre>\n<p>In the above code, I created a variable named <code>age</code> that holds an integer value.</p>\n<p>I then prompted the user to enter their age and stored the answer in the variable <code>age</code>.</p>\n<p>Then, I created a condition that checks whether the value contained in the variable <code>age</code> is less than 18.</p>\n<p>If so, I want a message printed to the console letting the user know that to proceed, the user should be at least 18 years of age.</p>\n<p>When asked for my age and I enter <code>16</code>, I'd get the following output:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 16\nYou need to be over 18 years old to continue\n</code></pre>\n<p>The condition (<code>age &lt; 18</code>) evaluates to <code>true</code> so the code in the <code>if</code> block executes.</p>\n<p>Then, I re-compile and re-run the program.</p>\n<p>This time, when asked for my age, say I enter <code>28</code>, but I don't get any output:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 28\n</code></pre>\n<p>This is because the condition evaluates to <code>false</code> and therefore the body of the <code>if</code> block is skipped.</p>\n<p>I have also not specified what should happen in the case that the user's age is greater than 18.</p>\n<p>To specify what happens in case the user's age is greater than 18, I can use an <code>if else</code> statement.</p>\n<h3 id=\"heading-how-to-create-anif-else-statement-in-c\"><strong>How to Create an</strong><code>if else</code> statement in C</h3>\n<p>You can add an <code>else</code> clause to an <code>if</code> statement to provide code that will execute only when the <code>if</code> statement evaluates to <code>false</code>.</p>\n<p>The <code>if else</code> statement essentially means that \"<code>if</code> this condition is true do the following thing, <code>else</code> do this thing instead\".</p>\n<p>If the condition inside the parentheses evaluates to <code>true</code>, the code inside the <code>if</code> block will execute.</p>\n<p>But if that condition evaluates to <code>false</code>, the code inside the <code>else</code> block will execute.</p>\n<p>The <code>else</code> keyword is the solution for when the <code>if</code> condition is false and the code inside the <code>if</code> block doesn't run. It provides an alternative.</p>\n<p>The general syntax looks like this:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">if</span> (condition) {\n  <span class=\"hljs-comment\">// run this code if condition is true</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// if the condition above is false, run this code</span>\n}\n</code></pre>\n<p>Now, let's revisit the example from the previous section, and specify what should happen if the user's age is greater than 18:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n   <span class=\"hljs-keyword\">int</span> age;\n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Please enter your age: \"</span>);\n\n   <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%i\"</span>, &amp;age);\n\n\n    <span class=\"hljs-comment\">// if the condition in the parentheses is true the code inside the curly braces will execute</span>\n    <span class=\"hljs-comment\">// otherwise it is skipped</span>\n    <span class=\"hljs-comment\">// and the code in the else block will execute</span>\n\n   <span class=\"hljs-keyword\">if</span> (age &lt; <span class=\"hljs-number\">18</span>) {\n       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You need to be over 18 years old to continue\\n\"</span>);\n   } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You are over 18 so you can continue \\n\"</span>);\n  }\n\n   }\n</code></pre>\n<p>If the condition is <code>true</code> the code in the <code>if</code> block runs:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 14\nYou need to be over 18 years old to continue\n</code></pre>\n<p>If the condition is <code>false</code> the code in the <code>if</code> block is skipped and the code in the <code>else</code> block runs instead:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 45\nYou are over 18 so you can continue\n</code></pre>\n<h3 id=\"heading-how-to-create-anelse-if-statement-in-c\"><strong>How to Create an</strong><code>else if</code> statement in C</h3>\n<p>But what happens when you want to have more than one condition to choose from?</p>\n<p>If you wish to chose between more than one option you can introduce an <code>else if</code> statement.</p>\n<p>An <code>else if</code> statement essentially means that \"If this condition is true, do the following. If it isn't, do this instead. However, if none of the above are true and all else fails, finally do this.\"</p>\n<p>The general syntax looks something like the following:</p>\n<pre><code class=\"lang-plaintext\">if (condition) {\n   // if condition is true run this code\n} else if(another_condition) {\n   // if the above condition was false and this condition is true,\n   // run the code in this block\n} else {\n   // if the two above conditions are false run this code\n}\n</code></pre>\n<p>Let's see how an <code>else if</code> statement works.</p>\n<p>Say you have the following example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n   <span class=\"hljs-keyword\">int</span> age;\n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Please enter your age: \"</span>);\n\n   <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%i\"</span>, &amp;age);\n\n   <span class=\"hljs-keyword\">if</span> (age &lt; <span class=\"hljs-number\">18</span>) {\n       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You need to be over 18 years old to continue\\n\"</span>);\n   }  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (age &lt; <span class=\"hljs-number\">21</span>) {\n       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You need to be over 21\\n\"</span>);\n   } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You are over 18 and older than 21 so you can continue \\n\"</span>);\n  }\n\n   }\n</code></pre>\n<p>If the first <code>if</code> statement is true, the rest of the block will not run:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 17\nYou need to be over 18 years old to continue\n</code></pre>\n<p>If the first <code>if</code> statement is false, then the program moves on to the next condition.</p>\n<p>If that is true the code inside the <code>else if</code> block executes and the rest of the block doesn't run:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 20\nYou are need to be over 21\n</code></pre>\n<p>If both of the previous conditions are all false, then the last resort is the <code>else</code> block which is the one to execute:</p>\n<pre><code class=\"lang-plaintext\">#output\n\nPlease enter your age: 22\nYou are over 18 and older than 21 so you can continue\n</code></pre>\n<h3 id=\"heading-how-to-use-the-ternary-operator-in-c\"><strong>How to Use the Ternary Operator in C</strong></h3>\n<p>The ternary operator (also known as the conditional operator) allows you to write an <code>if else</code> statement with fewer lines of code.</p>\n<p>It can provide a way of writing more readable and concise code and comes in handy when writing simple conditional expressions.</p>\n<p>You would want to use it when you are making making simple decisions and want to keep your code concise and on one line.</p>\n<p>However, it's best to stick to a regular <code>if-else</code> statement when you are dealing with more complex decisions as the ternary operator could make your code hard to read.</p>\n<p>The general syntax for the ternary operator looks something similar to the following:</p>\n<pre><code class=\"lang-plaintext\">condition ? expression_if_true : expression_if_false;\n</code></pre>\n<p>Let's break it down:</p>\n<ul>\n<li><p><code>condition</code> is the condition you want to evaluate. This condition will evaluate to either <code>true</code> of <code>false</code></p>\n</li>\n<li><p><code>?</code> separates the condition from the two possible expressions</p>\n</li>\n<li><p><code>expression_if_true</code> is executed if the <code>condition</code> evaluates to <code>true</code></p>\n</li>\n<li><p><code>:</code> separates the <code>expression_if_true</code> from the <code>expression_if_false</code></p>\n</li>\n<li><p><code>expression_if_false</code> is executed if the <code>condition</code> evaluates to <code>false</code>.</p>\n</li>\n</ul>\n<p>Let's take a look at an example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">int</span> y = (x &gt; <span class=\"hljs-number\">5</span>) ? <span class=\"hljs-number\">100</span> : <span class=\"hljs-number\">200</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"x: %i\\n\"</span>, x); <span class=\"hljs-comment\">// x: 10</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"y: %i\\n\"</span>, y);  <span class=\"hljs-comment\">// y: 100</span>\n   }\n</code></pre>\n<p>In the example above, the condition is <code>(x &gt; 5)</code>.</p>\n<p>If <code>x</code> is greater than 5, the condition evaluates to <code>true</code>. And when the condition is <code>true</code>, the value assigned to <code>y</code> will be <code>100</code>.</p>\n<p>If the condition evaluates to <code>false</code>, the value assigned to <code>y</code> will be <code>200</code>.</p>\n<p>So, since <code>x</code> is greater than 5 (<code>x = 10</code>), <code>y</code> is assigned the value <code>100</code>.</p>\n<h2 id=\"heading-chapter-5-loops\"><strong>Chapter 5: Loops</strong></h2>\n<p>In this chapter you will learn about loops, which are essential for automating repetitive tasks without having to write the same code multiple times.</p>\n<p>Loops allow you to execute a specific block of code instructions repeatedly over and over again until a certain condition is met.</p>\n<p>You will learn about the different types of loops, such as the <code>for</code> , <code>while</code> and <code>do-while</code> loops, and understand their syntax and when you should use each one.</p>\n<p>You will also learn about the <code>break</code> statement, which allows you to control the execution flow within loops in specific ways.</p>\n<h3 id=\"heading-how-to-create-afor-loop-in-c\"><strong>How to Create a</strong><code>for</code> Loop in C</h3>\n<p>A <code>for</code> loop allows you to execute a block of code repeatedly based on a specified condition.</p>\n<p>It's useful when you know how many times you want to repeat a certain action.</p>\n<p>The general syntax for a <code>for</code> loop looks like this:</p>\n<pre><code class=\"lang-plaintext\">for (initialization; condition; increment/decrement) {\n    // Code to be executed in each iteration\n}\n</code></pre>\n<p>Let's break it down:</p>\n<ul>\n<li><p><code>initialization</code> is the step where you initialize a loop control variable.<br />  It's typically used to set the starting point for your loop.</p>\n</li>\n<li><p><code>condition</code> is the condition that is evaluated before each iteration. If the condition is <code>true</code>, the loop continues. If it's <code>false</code>, the loop terminates. The loop will run as long as the condition remains true.</p>\n</li>\n<li><p><code>increment/decrement</code> is the part responsible for changing the loop control variable after each iteration. It can be an increment (<code>++</code>), a decrement (<code>--</code>), or any other modification.</p>\n</li>\n<li><p><code>Code to be executed in each iteration</code> is the block of code inside the <code>for</code> loop's body that gets executed in each iteration if the condition is <code>true</code>.</p>\n</li>\n</ul>\n<p>Let's see an example of how a <code>for</code> loop works.</p>\n<p>Say you want to print the numbers from 1 to 5 to the console:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Iteration %i\\n\"</span>, i);\n    }\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Iteration 1\nIteration 2\nIteration 3\nIteration 4\nIteration 5\n</code></pre>\n<p>In the example above, I first initialize the loop control variable <code>i</code> with a value of <code>1</code>.</p>\n<p>The condition <code>i &lt;= 5</code> is true, so the loop's body is executed and <code>\"Iteration 1\"</code> is printed.</p>\n<p>After each iteration, the value of <code>i</code> is incremented by <code>1</code>. So, <code>i</code> is incremented to <code>2</code>.</p>\n<p>The condition is still <code>true</code>, so <code>\"Iteration 2\"</code> is printed.</p>\n<p>The loop will continue as long as <code>i</code> is less than or equal to <code>5</code>.</p>\n<p>When <code>i</code> becomes <code>6</code>, the condition evaluates to <code>false</code> and the loop terminates.</p>\n<h3 id=\"heading-how-to-create-awhile-loop-in-c\"><strong>How to Create a</strong><code>while</code> Loop in C</h3>\n<p>As you saw in the previous section, a <code>for</code> loop is used when you know the exact number of iterations you want the loop to perform.</p>\n<p>The <code>while</code> loop is useful when you want to repeat an action based on a condition but don't know the exact number of iterations beforehand.</p>\n<p>Here is the general syntax of a <code>while</code> loop:</p>\n<pre><code class=\"lang-plaintext\">while (condition) {\n    // Code to be executed in each iteration\n}\n</code></pre>\n<p>With a <code>while</code> loop, the condition is evaluated before each iteration. If the condition is <code>true</code>, the loop continues. If it's false, the loop terminates.</p>\n<p>The <code>while</code> loop will continue as long as the condition evaluates to <code>true</code>.</p>\n<p>Something to note with <code>while</code> loops is that the code in the loop's body is not guaranteed to run even at least one time if a condition is not met.</p>\n<p>Let's see an example of how a <code>while</code> loop works:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">while</span> (count &lt;= <span class=\"hljs-number\">5</span>) {\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Iteration %i\\n\"</span>, count);\n\n        count++;\n    }\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Iteration 1\nIteration 2\nIteration 3\nIteration 4\nIteration 5\n</code></pre>\n<p>In the example above, I first initialize a variable <code>count</code> with a value of <code>1</code>.</p>\n<p>Before it runs any code, the <code>while</code> loop checks a condition.</p>\n<p>The condition <code>count &lt;= 5</code> is <code>true</code> because count is initially <code>1</code>. So, the loop's body is executed and <code>\"Iteration 1\"</code> is printed.</p>\n<p>Then, <code>count</code> is incremented to <code>2</code>.</p>\n<p>The condition is still <code>true</code>, so <code>\"Iteration 2\"</code> is printed.</p>\n<p>The loop will continue as long as count is less than or equal to 5.</p>\n<p>This process continues until count becomes <code>6</code>, at which point the condition becomes <code>false</code>, and the loop terminates.</p>\n<p>Something to be aware of when working with <code>while</code> loops is accidentally creating an infinite loop:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt; </span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Hello world\"</span>);\n    }\n}\n</code></pre>\n<p>In this case the condition always evaluates to <code>true</code>.</p>\n<p>After printing the line of code inside the curly braces, it continuously checks wether it should run the code again.</p>\n<p>As the answer is always yes (since the condition it needs to check is always true each and every time), it runs the code again and again and again.</p>\n<p>The way to stop the program and escape from the endless loop is running <code>Ctrl C</code> in the terminal.</p>\n<h3 id=\"heading-how-to-create-ado-while-loop-in-c\"><strong>How to Create a</strong><code>do-while</code> Loop in C</h3>\n<p>As mentioned in the previous section, the code in the <code>while</code> loop's body is not guaranteed to run even at least one time if the condition is not met.</p>\n<p>A <code>do-while</code> loop executes a block of code repeatedly for as long as a condition remains <code>true</code>.</p>\n<p>However, in contrast to a <code>while</code> loop, it is guaranteed to run at least once, regardless of whether the condition is <code>true</code> or <code>false</code> from the beginning.</p>\n<p>So, the <code>do-while</code> loop is useful when you want to ensure that the loop's body is executed at least once before the condition is checked.</p>\n<p>The general syntax for a <code>do-while</code> loop looks like this:</p>\n<pre><code class=\"lang-plaintext\">do {\n    // Code to be executed in each iteration\n} while (condition);\n</code></pre>\n<p>Let's take a look at an example that demonstrates how a <code>do-while</code> loop works:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">do</span> {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Iteration %i\\n\"</span>, count);\n\n        count++;\n\n    } <span class=\"hljs-keyword\">while</span> (count &lt;= <span class=\"hljs-number\">5</span>);\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Iteration 1\nIteration 2\nIteration 3\nIteration 4\nIteration 5\n</code></pre>\n<p>In the example above I initialize a variable <code>count</code> with a value of <code>1</code>.</p>\n<p>A <code>do-while</code> loop first does something and then checks a condition.</p>\n<p>So, the block of code inside the loop is executed at least one time.</p>\n<p>The string <code>\"Iteration 1\"</code> is printed and then <code>count</code> is incremented to <code>2</code>.</p>\n<p>The condition <code>count &lt;= 5</code> is then checked and it evaluates to <code>true</code>, so the loop continues.</p>\n<p>The loop will continue as long as <code>count</code> is less than or equal to 5.</p>\n<p>After the iteration where <code>count</code> is <code>6</code>, the condition becomes <code>false</code>, and the loop terminates.</p>\n<h3 id=\"heading-how-to-use-thebreak-statement-in-c\"><strong>How to Use the</strong><code>break</code> Statement in C</h3>\n<p>The <code>break</code> statement is used to immediately exit a loop and terminate its execution.</p>\n<p>It's a control flow statement that allows you to interrupt the normal loop execution and move on to the code after the loop.</p>\n<p>The <code>break</code> statement is especially useful when you want to exit a loop under specific conditions, even if the loop's termination condition hasn't been met.</p>\n<p>You might use it when you encounter a certain value, or when a specific condition is met.</p>\n<p>Here's how to use a <code>break</code> statement in a loop:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> target = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Current value: %i\\n\"</span>, i);\n\n        <span class=\"hljs-keyword\">if</span> (i == target) {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Target value reached. Exiting loop.\\n\"</span>);\n            <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// Exit the loop</span>\n        }\n    }\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Current value: 1\nCurrent value: 2\nCurrent value: 3\nCurrent value: 4\nCurrent value: 5\nTarget value reached. Exiting loop.\n</code></pre>\n<p>In the example above, a <code>for</code> loop is set to iterate from <code>1</code> to <code>10</code>.</p>\n<p>Inside the loop, the current value of <code>i</code> is printed on each iteration.</p>\n<p>There is also an <code>if</code> statement that checks if the current value of <code>i</code> matches the target value, which is set to <code>5</code>.</p>\n<p>If <code>i</code> matches the target value, the <code>if</code> statement is triggered and a message is printed.</p>\n<p>As a result, the <code>break</code> statement exits the current loop immediately and prematurely.</p>\n<p>The program will continue executing the code that is after the loop.</p>\n<h2 id=\"heading-chapter-6-arrays\"><strong>Chapter 6: Arrays</strong></h2>\n<p>Arrays offer a versatile and organized way to store multiple pieces of related data that are arranged in an ordered sequence.</p>\n<p>They allow you to store multiple values of the same data type under a single identifier and perform repetitive tasks on each element.</p>\n<p>In this chapter, you will learn how to declare and initialize arrays. You will also learn how to access individual elements within an array using index notation and modify them.</p>\n<p>In addition, you will learn how to use loops to iterate through array elements and perform operations on each element.</p>\n<h3 id=\"heading-how-to-declare-and-initialize-an-array-in-c\"><strong>How to Declare and Initialize an Array in C</strong></h3>\n<p>To declare an array in C, you first specify the data type of the elements the array will store.</p>\n<p>This means you can create arrays of type <code>int</code>, <code>float</code>, <code>char</code>, and so on.</p>\n<p>You then specify the array's name, followed by the array's size in square brackets.</p>\n<p>The size of the array is the number of elements that it can hold. This number must be a positive integer.</p>\n<p>Keep in mind that arrays have a fixed size, and once declared, you cannot change it later on.</p>\n<p>Here is the general syntax for declaring an array:</p>\n<pre><code class=\"lang-c\">data_type array_name[array_size];\n</code></pre>\n<p>Here is how to declare an array of integers:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[<span class=\"hljs-number\">5</span>];\n}\n</code></pre>\n<p>In the example above, I created an array named <code>grades</code> that can store <code>5int</code> numbers.</p>\n<p>After declaring an array, you can initialize it with initial values.</p>\n<p>To do this, use the assignment operator, <code>=</code>, followed by curly braces, <code>{}</code>.</p>\n<p>The curly braces will enclose the values, and each value needs to be separated by a comma.</p>\n<p>Here is how to initialize the <code>grades</code> array:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n}\n</code></pre>\n<p>Keep in mind that the number of values should match the array size, otherwise you will encounter errors.</p>\n<p>Something to note here is that you can also partially initialize the array:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>};\n}\n</code></pre>\n<p>In this case, the remaining two elements will be set to <code>0</code>.</p>\n<p>Another way to initialize arrays is to omit the array's length inside the square brackets and only assign the initial values, like so:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n}\n</code></pre>\n<p>In this example, the array's size is <code>5</code> because I assigned it <code>5</code> values.</p>\n<h4 id=\"heading-how-to-find-the-length-of-an-array-in-c-using-thesizeof-operator\"><strong>How to Find the Length of an Array in C Using the</strong><code>sizeof()</code> Operator</h4>\n<p>The <code>sizeof</code> operator comes in handy when you need to calculate the size of an array.</p>\n<p>Let's see an example of the <code>sizeof</code> operator in action:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n    <span class=\"hljs-comment\">// calculate the size of the array</span>\n    <span class=\"hljs-keyword\">int</span> array_size = <span class=\"hljs-keyword\">sizeof</span>(grades);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Size of array: %i bytes\\n\"</span>, array_size);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Size of array: 20 bytes\n</code></pre>\n<p>In the example above, <code>sizeof(grades)</code> calculates the total size of the array in bytes.</p>\n<p>In this case, the array has five integers.</p>\n<p>As mentioned in a previous chapter, on most modern systems an <code>int</code> typically occupies 4 bytes of memory. Therefore, the total size is <code>5 x 4 = 20</code> bytes of memory for the entire array.</p>\n<p>Here is how you can check how much memory each <code>int</code> occupies using the <code>sizeof</code> operator:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n    <span class=\"hljs-comment\">// calculate the size of a single array element</span>\n    <span class=\"hljs-keyword\">int</span> element_size = <span class=\"hljs-keyword\">sizeof</span>(grades[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Size of a single element: %i bytes\\n\"</span>, element_size);\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Size of a single element: 4 bytes\n</code></pre>\n<p>The <code>sizeof(grades[0])</code> calculates the size of a single element in bytes.</p>\n<p>By dividing the total size of the array by the size of a single element, you can calculate the number of elements in the array, which is equal to the array's length:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n     <span class=\"hljs-keyword\">int</span> array_size = <span class=\"hljs-keyword\">sizeof</span>(grades);\n\n     <span class=\"hljs-keyword\">int</span> element_size = <span class=\"hljs-keyword\">sizeof</span>(grades[<span class=\"hljs-number\">0</span>]);\n\n     <span class=\"hljs-comment\">// calculate the length of the array</span>\n     <span class=\"hljs-keyword\">int</span> length = array_size / element_size;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Length of the array: %i elements\\n\"</span>, length);\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Length of the array: 5 elements\n</code></pre>\n<h3 id=\"heading-how-to-access-array-elements-in-c\"><strong>How to Access Array Elements in C</strong></h3>\n<p>You can access each element in an array by specifying its index or its position in the array.</p>\n<p>Note that in C, indexing starts at <code>0</code> instead of <code>1</code>.</p>\n<p>So, the index of the first element is <code>0</code>, the index of the second element is <code>1</code>, and so on.</p>\n<p>The last element in an array has an index of <code>array_size - 1</code>.</p>\n<p>To access individual elements in the array, you specify the array's name followed by the element's index number inside square brackets (<code>[]</code>).</p>\n<pre><code class=\"lang-plaintext\">array_name[index];\n</code></pre>\n<p>Let's take a look at the following example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n   <span class=\"hljs-comment\">// Access each array element using index notation</span>\n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 0: %i\\n\"</span>, grades[<span class=\"hljs-number\">0</span>]);  \n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 1: %i\\n\"</span>, grades[<span class=\"hljs-number\">1</span>]);  \n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 2: %i\\n\"</span>, grades[<span class=\"hljs-number\">2</span>]); \n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 3: %i\\n\"</span>, grades[<span class=\"hljs-number\">3</span>]); \n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 4: %i\\n\"</span>, grades[<span class=\"hljs-number\">4</span>]); \n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Element at index 0: 50\nElement at index 1: 75\nElement at index 2: 100\nElement at index 3: 67\nElement at index 4: 90\n</code></pre>\n<p>In the example above, to access each item from the integer array <code>grades</code>, I have to specify the array's name along with the item's position in the array inside square brackets.</p>\n<p>Remember that the index starts from <code>0</code>, so <code>grades[0]</code> gives you the first element, <code>grades[1]</code> gives you the second element, and so on.</p>\n<p>Note that if you try to access an element with an index number that is higher than <code>array_size - 1</code>, the compiler will return a random number:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 5: %d\\n\"</span>, grades[<span class=\"hljs-number\">5</span>]);  \n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Element at index 5: 220312136\n</code></pre>\n<h3 id=\"heading-how-to-modify-array-elements-in-c\"><strong>How to Modify Array Elements in C</strong></h3>\n<p>Once you know how to access array elements, you can then modify them.</p>\n<p>The general syntax for modifying an array element looks like this:</p>\n<pre><code class=\"lang-plaintext\">array_name[index] = new_value;\n</code></pre>\n<p>You can change the value of an element by assigning a new value to it using its index.</p>\n<p>Let's take the <code>grades</code> array from earlier on:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n}\n</code></pre>\n<p>Here is how you would change the value <code>75</code> to <code>85</code>:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n   <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n   grades[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">85</span>; <span class=\"hljs-comment\">// changing the value at index 1 to 85</span>\n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index 1: %i\\n\"</span>, grades[<span class=\"hljs-number\">1</span>]); \n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Element at index 1: 85\n</code></pre>\n<p>When modifying arrays, keep in mind that the new value must match the declared data type of the array.</p>\n<h3 id=\"heading-how-to-loop-through-an-array-in-c\"><strong>How to Loop Through an Array in C</strong></h3>\n<p>By looping through an array, you can access and perform operations on each element sequentially.</p>\n<p>The <code>for</code> loop is commonly used to iterate through arrays.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index %i: %i\\n\"</span>, i, grades[i]);\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Element at index 0: 50\nElement at index 1: 75\nElement at index 2: 100\nElement at index 3: 67\nElement at index 4: 90\n</code></pre>\n<p>When using a <code>for</code> loop to loop through an array, you have to specify the index as the loop variable, and then use the index to access each array element.</p>\n<p>The <code>%i</code> placeholders are replaced with the current index <code>i</code> and the value at that index in the grades array, respectively.</p>\n<p>You can also use a <code>while</code> loop to iterate through an array:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> (i &lt; <span class=\"hljs-number\">5</span>) {\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index %i: %i\\n\"</span>, i, grades[i]);\n        i++;\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Element at index 0: 50\nElement at index 1: 75\nElement at index 2: 100\nElement at index 3: 67\nElement at index 4: 90\n</code></pre>\n<p>When using a <code>while</code> loop to loop through an array, you will need an index variable, <code>int i = 0</code>, to keep track of the current position in the array.</p>\n<p>The loop checks the condition <code>(i &lt; 5)</code> and prints the index of the grade as well as the actual grade value.</p>\n<p>After each grade is shown, the variable <code>i</code> is increased by one, and the loop continues until it has shown all the grades in the list.</p>\n<p>A <code>do-while</code> works in a similar way to the <code>while</code> loop, but it is useful when you want to ensure that the loop body is executed at least once before checking the condition:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n     <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">do</span> {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index %i: %i\\n\"</span>, i, grades[i]);\n\n        i++;\n    } <span class=\"hljs-keyword\">while</span> (i &lt; <span class=\"hljs-number\">5</span>);\n}\n</code></pre>\n<p>You can also use the <code>sizeof</code> operator to loop through an array.</p>\n<p>This method is particularly useful to ensure your loop doesn't exceed the array's length:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> grades[] = {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">90</span>};\n\n    <span class=\"hljs-keyword\">int</span> length = <span class=\"hljs-keyword\">sizeof</span>(grades) / <span class=\"hljs-keyword\">sizeof</span>(grades[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index %i: %i\\n\"</span>, i, grades[i]);\n    }\n\n}\n</code></pre>\n<p>The line <code>int length = sizeof(grades) / sizeof(grades[0]);</code> calculates the length of the <code>grades</code> array.</p>\n<p>The length is calculated by dividing the total size (in bytes) of the array by the size of a single element <code>grades[0]</code>. The result is stored in the <code>length</code> variable.</p>\n<p>The loop then iterates through the array using this <code>length</code> value.</p>\n<p>For each iteration, it prints the index <code>i</code> and the value of the grade at that index <code>grades[i]</code>.</p>\n<h2 id=\"heading-chapter-7-strings\"><strong>Chapter 7: Strings</strong></h2>\n<p>In the previous chapter, you learned the basics of arrays in C.</p>\n<p>Now, it's time to learn about strings – a special kind of array.</p>\n<p>Strings are everywhere in programming. They are used to represent names, messages, passwords, and more.</p>\n<p>In this chapter, you will learn about strings in C and how they are stored as arrays of characters.</p>\n<p>You'll also learn the fundamentals of string manipulation.</p>\n<p>Specifically, you will learn how to find a string's length and how to copy, concatenate, and compare strings in C.</p>\n<h3 id=\"heading-what-are-strings-in-c\"><strong>What Are Strings in C?</strong></h3>\n<p>A string is a sequence of characters, like letters, numbers, or symbols, that are used to represent text.</p>\n<p>In C, strings are actually arrays of characters. And each character in the string has a specific position within the array.</p>\n<p>Another unique characteristic of strings in C is that at the end of every one, there is a hidden <code>\\0</code> character called the 'null terminator'.</p>\n<p>This terminator lets the computer know where the string ends.</p>\n<p>So, the string '<code>Hello</code>' in C is stored as '<code>Hello\\0</code>' in memory.</p>\n<h3 id=\"heading-how-to-create-strings-in-c\"><strong>How to Create Strings in C</strong></h3>\n<p>One way to create a string in C is to initialize an array of characters.</p>\n<p>The array will contain the characters that make up the string.</p>\n<p>Here is how you would initialize an array to create the string 'Hello':</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">char</span> word[<span class=\"hljs-number\">6</span>] = {<span class=\"hljs-string\">'H'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'\\0'</span>};\n\n}\n</code></pre>\n<p>Note how I specified that the array should store <code>6</code> characters despite <code>Hello</code> being only <code>5</code> characters long. This is due to the null operator.</p>\n<p>Make sure to include the null terminator, <code>\\0</code>, as the last character to signify the end of the string.</p>\n<p>Let's look at how you would create the string 'Hello world':</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">char</span> phrase[<span class=\"hljs-number\">12</span>] = {<span class=\"hljs-string\">'H'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">' '</span>, <span class=\"hljs-string\">'w'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'\\0'</span>};\n}\n</code></pre>\n<p>In this example, there is a space between the word 'Hello' and the word 'world'.</p>\n<p>So, the array must include a blank space character.</p>\n<p>To print the string, you use the <code>printf()</code> function, the <code>%s</code> format code and the name of the array:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">char</span> phrase[] = {<span class=\"hljs-string\">'H'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">' '</span>, <span class=\"hljs-string\">'w'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'\\0'</span>};\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>, phrase);\n\n}\n</code></pre>\n<p>Another way to create a string in C is to use a string literal.</p>\n<p>In this case, you create an array of characters and then assign the string by enclosing it in double quotes:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">char</span> word[] = <span class=\"hljs-string\">\"Hello\"</span>;\n\n}\n</code></pre>\n<p>With string literals, the null terminator (<code>\\0</code>) is implied.</p>\n<p>Creating strings with string literals is easier, as you don't need to add the null terminator at the end. This method is also much more readable and requires less code.</p>\n<p>However, you may want to use character arrays when you want to modify the string's content. String literals are read-only, meaning the content is fixed.</p>\n<h3 id=\"heading-how-to-manipulate-strings-in-c\"><strong>How to Manipulate Strings in C</strong></h3>\n<p>C provides functions that allow you to perform operations on strings, such as copying, concatenating, and comparing, to name a few.</p>\n<p>To use these functions, you first need to include the <code>string.h</code> header file by adding the line <code>#include &lt;string.h&gt;</code> at the top of your file.</p>\n<h4 id=\"heading-how-to-find-the-length-of-a-string-in-c\"><strong>How to Find the Length of a String in C</strong></h4>\n<p>To calculate the length of a string, use the <code>strlen()</code> function:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">char</span> phrase[] = <span class=\"hljs-string\">\"Hello\"</span>;\n\n  <span class=\"hljs-keyword\">int</span> length = <span class=\"hljs-built_in\">strlen</span>(phrase);\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"String length: %i\\n\"</span>, length);\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">String length: 5\n</code></pre>\n<p>The <code>strlen()</code> function will return the number of characters that make up the string.</p>\n<p>Note that the result does not include the null terminator, <code>\\0</code>.</p>\n<h4 id=\"heading-how-to-copy-a-string-in-c\"><strong>How to Copy a String in C</strong></h4>\n<p>To copy one string into another one, you can use the <code>strcpy()</code> function.</p>\n<p>You may want to copy a string in C when you need to make changes to it without modifying it. It comes in handy when you need to keep the original string's content intact.</p>\n<p>The general syntax for the <code>strcpy()</code> function looks like this:</p>\n<pre><code class=\"lang-plaintext\">strcpy(destination_string, original_string);\n</code></pre>\n<p>The <code>strcpy()</code> function copies <code>original_string</code> into <code>destination_string</code>, including the null terminator (<code>'\\0'</code>).</p>\n<p>One thing to note here is that you need to make sure the destination array has enough space for the original string:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n    <span class=\"hljs-keyword\">char</span> original[] = <span class=\"hljs-string\">\"Hello\"</span>;\n\n    <span class=\"hljs-keyword\">char</span> destination[<span class=\"hljs-number\">20</span>]; <span class=\"hljs-comment\">// Make sure this array is big enough</span>\n\n    <span class=\"hljs-built_in\">strcpy</span>(destination, original);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Copied string: %s\\n\"</span>, destination);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Copied string: Hello\n</code></pre>\n<p>The <code>strcpy()</code> function copies the original string into an empty array and returns the copied string, which also includes the null terminator character (<code>'\\0'</code>).</p>\n<h4 id=\"heading-how-to-concatenate-strings-in-c\"><strong>How to Concatenate Strings in C</strong></h4>\n<p>You can concatenate (add) two strings together by using the <code>strcat()</code> function.</p>\n<p>The general syntax for the <code>strcat()</code> function looks something like the following:</p>\n<pre><code class=\"lang-plaintext\">strcat(destination_string, original_string);\n</code></pre>\n<p>The <code>strcat()</code> function takes the <code>original</code> string and adds it to the end of <code>destination</code> string.</p>\n<p>Make sure that the <code>destination_string</code> has enough memory for the <code>original_string</code>.</p>\n<p>Something to note here is that <code>strcat()</code> does not create a new string.</p>\n<p>Instead, it modifies the original <code>destination_string</code>, by including the <code>original_string</code> at the end.</p>\n<p>Let's see an example of how <code>strcat()</code> works:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n\n  <span class=\"hljs-keyword\">char</span> greeting[<span class=\"hljs-number\">50</span>] = <span class=\"hljs-string\">\"Hello, \"</span>;\n\n  <span class=\"hljs-keyword\">char</span> name[] = <span class=\"hljs-string\">\"Dionysia\"</span>;\n\n  <span class=\"hljs-built_in\">strcat</span>(greeting, name);\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Message: %s\\n\"</span>, greeting);\n\n}\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-plaintext\">Message: Hello, Dionysia\n</code></pre>\n<h4 id=\"heading-how-to-compare-strings-in-c\"><strong>How to Compare Strings in C</strong></h4>\n<p>To compare two strings for equality, you can use the <code>strcmp()</code> function.</p>\n<p>The general syntax for the <code>strcmp()</code> function looks like this:</p>\n<pre><code class=\"lang-plaintext\">strcmp(string1, string2);\n</code></pre>\n<p>The <code>strcmp()</code> function compares <code>string1</code> with <code>string2</code> and returns an integer.</p>\n<p>If the return value of <code>strcmp()</code> is <code>0</code>, then it means the two strings are the same:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n  <span class=\"hljs-keyword\">char</span> word1[] = <span class=\"hljs-string\">\"apples\"</span>;\n  <span class=\"hljs-keyword\">char</span> word2[] = <span class=\"hljs-string\">\"apples\"</span>;\n\n  <span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-built_in\">strcmp</span>(word1, word2);\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Result: 0</span>\n\n}\n</code></pre>\n<p>If the return value of <code>strcmp()</code> is less than <code>0</code>, then it means the first word comes before the second:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n  <span class=\"hljs-keyword\">char</span> word1[] = <span class=\"hljs-string\">\"apples\"</span>;\n  <span class=\"hljs-keyword\">char</span> word2[] = <span class=\"hljs-string\">\"bananas\"</span>;\n\n  <span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-built_in\">strcmp</span>(word1, word2);\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Result: -1</span>\n\n}\n</code></pre>\n<p>And if the return value of <code>strcmp()</code> is greater than <code>0</code>, then it means the first word comes after the second one:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n  <span class=\"hljs-keyword\">char</span> word1[] = <span class=\"hljs-string\">\"bananas\"</span>;\n  <span class=\"hljs-keyword\">char</span> word2[] = <span class=\"hljs-string\">\"apples\"</span>;\n\n  <span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-built_in\">strcmp</span>(word1, word2);\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %i\\n\"</span>, result); <span class=\"hljs-comment\">// Result: 1</span>\n\n}\n</code></pre>\n<h2 id=\"heading-further-learning-advanced-c-topics\"><strong>Further learning: Advanced C Topics</strong></h2>\n<p>While this handbook has covered a wide range of topics, there is still so much to learn, as programming is so vast.</p>\n<p>Once you have built a solid foundation with the basics of C programming, you may want to explore more advanced concepts.</p>\n<p>You may want to move on to learning about functions, for example. They allow you to write instructions for a specific task and reuse that code throughout your program.</p>\n<p>You may also want to learn about pointers. Pointers in C are like arrows that show you where a specific piece of information is stored in the computer's memory.</p>\n<p>Then, you may want to move on to learning about structures. They're like custom data containers that allow you to group different types of information under one name.</p>\n<p>Lastly, you may want to learn how to work with files. Working with files in C allows you to read from and write to files. This is useful for tasks like saving user data, reading configuration settings, or sharing data between different programs.</p>\n<p>These suggestions are not a definitive guide – just a few ideas for you to continue your C programming learning journey.</p>\n<p>If you are interested in learning more, you can check out the following freeCodeCamp resources:</p>\n<ul>\n<li><p><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=KJgsSFOSQv0&amp;t=12372s\">C Programming Tutorial for Beginners</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/learn-c-programming-classic-book-dr-chuck/\">Learn C Programming Using the Classic Book by Kernighan and Ritchie</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.freecodecamp.org/news/finally-understand-pointers-in-c/\">Unlock the Mysteries of Pointers in C</a></p>\n</li>\n</ul>\n<h2 id=\"heading-conclusion\"><strong>Conclusion</strong></h2>\n<p>This marks the end of this introduction to the C programming language.</p>\n<p>Thank you so much for sticking with it and making it until the end.</p>\n<p>You learned how to work with variables, various data types, and operators.</p>\n<p>You also learned how to write conditional statements and loops. And you learned the basics of working with arrays and strings.</p>\n<p>Hopefully, you have gained a good understanding of some of the fundamentals of C programming, got some inspiration on what to learn next, and are excited to continue your programming journey.</p>\n<p>Happy coding!</p>\n"
            },
            "publishedAt": "2023-08-28T15:00:00.000Z",
            "updatedAt": "2024-04-01T12:56:14.527Z"
          }
        }
      ],
      "pageInfo": {
        "endCursor": "NjYwYWE3NDhiNjEwZjNmMWNkY2I3YWU3XzIwMjMtMDgtMjhUMTU6MDA6MDAuMDAwWg==",
        "hasNextPage": false
      }
    }
  }
}
