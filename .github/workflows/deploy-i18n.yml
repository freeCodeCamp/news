name: i18n - Build and Deploy

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0/6 * * *' # Build once every six hours

jobs:
  build:
    name: Build
    runs-on: [self-hosted, on-aws]

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
        languages:
          [chinese, espanol, italian, japanese, korean, portuguese, ukrainian]
        site_tlds: [org]

    env:
      BUILD_LANG: ${{ matrix.languages }}

      ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
      ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}

      CHINESE_GHOST_API_URL: ${{ secrets.CHINESE_GHOST_API_URL }}
      CHINESE_GHOST_API_VERSION: ${{ secrets.CHINESE_GHOST_API_VERSION }}
      CHINESE_GHOST_CONTENT_API_KEY: ${{ secrets.CHINESE_GHOST_CONTENT_API_KEY }}

      ENGLISH_GHOST_API_URL: ${{ secrets.ENGLISH_GHOST_API_URL }}
      ENGLISH_GHOST_API_VERSION: ${{ secrets.ENGLISH_GHOST_API_VERSION }}
      ENGLISH_GHOST_CONTENT_API_KEY: ${{ secrets.ENGLISH_GHOST_CONTENT_API_KEY }}

      ESPANOL_GHOST_API_URL: ${{ secrets.ESPANOL_GHOST_API_URL }}
      ESPANOL_GHOST_API_VERSION: ${{ secrets.ESPANOL_GHOST_API_VERSION }}
      ESPANOL_GHOST_CONTENT_API_KEY: ${{ secrets.ESPANOL_GHOST_CONTENT_API_KEY }}

      FRENCH_GHOST_API_URL: ${{ secrets.FRENCH_GHOST_API_URL }}
      FRENCH_GHOST_API_VERSION: ${{ secrets.FRENCH_GHOST_API_VERSION }}
      FRENCH_GHOST_CONTENT_API_KEY: ${{ secrets.FRENCH_GHOST_CONTENT_API_KEY }}

      ITALIAN_GHOST_API_URL: ${{ secrets.ITALIAN_GHOST_API_URL }}
      ITALIAN_GHOST_API_VERSION: ${{ secrets.ITALIAN_GHOST_API_VERSION }}
      ITALIAN_GHOST_CONTENT_API_KEY: ${{ secrets.ITALIAN_GHOST_CONTENT_API_KEY }}

      JAPANESE_GHOST_API_URL: ${{ secrets.JAPANESE_GHOST_API_URL }}
      JAPANESE_GHOST_API_VERSION: ${{ secrets.JAPANESE_GHOST_API_VERSION }}
      JAPANESE_GHOST_CONTENT_API_KEY: ${{ secrets.JAPANESE_GHOST_CONTENT_API_KEY }}

      KOREAN_GHOST_API_URL: ${{ secrets.KOREAN_GHOST_API_URL }}
      KOREAN_GHOST_API_VERSION: ${{ secrets.KOREAN_GHOST_API_VERSION }}
      KOREAN_GHOST_CONTENT_API_KEY: ${{ secrets.KOREAN_GHOST_CONTENT_API_KEY }}

      PORTUGUESE_GHOST_API_URL: ${{ secrets.PORTUGUESE_GHOST_API_URL }}
      PORTUGUESE_GHOST_API_VERSION: ${{ secrets.PORTUGUESE_GHOST_API_VERSION }}
      PORTUGUESE_GHOST_CONTENT_API_KEY: ${{ secrets.PORTUGUESE_GHOST_CONTENT_API_KEY }}

      UKRAINIAN_GHOST_API_URL: ${{ secrets.UKRAINIAN_GHOST_API_URL }}
      UKRAINIAN_GHOST_API_VERSION: ${{ secrets.UKRAINIAN_GHOST_API_VERSION }}
      UKRAINIAN_GHOST_CONTENT_API_KEY: ${{ secrets.UKRAINIAN_GHOST_CONTENT_API_KEY }}

      URDU_GHOST_API_URL: ${{ secrets.URDU_GHOST_API_URL }}
      URDU_GHOST_API_VERSION: ${{ secrets.URDU_GHOST_API_VERSION }}
      URDU_GHOST_CONTENT_API_KEY: ${{ secrets.URDU_GHOST_CONTENT_API_KEY }}

      ADS_ENABLED: ${{ secrets.ADS_ENABLED }}
      GOOGLE_ADSENSE_DATA_AD_CLIENT: ${{ secrets.GOOGLE_ADSENSE_DATA_AD_CLIENT }}
      GOOGLE_ADSENSE_DATA_AD_SLOT: ${{ secrets.GOOGLE_ADSENSE_DATA_AD_SLOT }}

      POSTS_PER_PAGE: ${{ secrets.POSTS_PER_PAGE }}

      SITE_DOMAIN: freecodecamp.${{ matrix.site_tlds }}

      LOCALE_FOR_UI: ${{ matrix.languages }}
      LOCALE_FOR_GHOST: ${{ matrix.languages }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get install make

      - name: Build site
        run: npm run build
        env:
          NODE_ENV: production

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2
      - name: Create a tagname
        id: tagname
        run: |
          echo "tagname=$(git rev-parse --short HEAD)-$(date +%Y%m%d)-$(date +%H%M)" >> $GITHUB_ENV

      - name: Build & Tag Images
        run: |
          docker build . \
          --tag registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ matrix.site_tlds }}/news-${{ matrix.languages }}:$tagname \
          --tag registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ matrix.site_tlds }}/news-${{ matrix.languages }}:latest \
          --build-arg BUILD_LANGUAGE=${{ matrix.languages }} \
          --file docker/Dockerfile

      # - name: Build the registry test image
      #   run: |
      #     cd registry-test
      #     REGISTRY_NAME=${{ secrets.DOCR_NAME }} TAGNAME_CI=$tagname make build
      #     cd ..

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ matrix.site_tlds }}/news-${{ matrix.languages }}:$tagname
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ matrix.site_tlds }}/news-${{ matrix.languages }}:latest

      # - name: Push the registry test image
      #   run: |
      #     cd registry-test
      #     REGISTRY_NAME=${{ secrets.DOCR_NAME }} TAGNAME_CI=$tagname make push
      #     cd ..

      - name: Clean old DO images
        run: |
          rawResponse=$(doctl registry repository list-tags ${{ matrix.site_tlds }}/news-${{ matrix.languages }} --output=json)
          tags=$(jq '[.[] | {updated_at, tag}]' <<<"$rawResponse")
          toDelete=()
          len=$(jq length <<<"$tags")
          echo "Found $len tags."
          for i in $(seq 0 $((len - 1))); do
              tag=$(echo $tags | jq -r --argjson index "$i" '.[$index].tag')
              updated=$(echo $tags | jq -r --argjson index "$i" '.[$index].updated_at')
              updatedDate=$(date -d $updated +%s)
              now=$(date +%s)
              diff=$(($now - $updatedDate))
              if [ "$tag" != "latest" ] && [ $diff -gt 172800 ]; then
                  toDelete+=($tag)
              fi
          done
          echo "Found ${#toDelete[@]} tags to delete."
          for value in "${toDelete[@]}"; do
              echo "Deleting tag: $value"
              doctl registry repository delete-tag ${{ matrix.site_tlds }}/news-${{ matrix.languages }} $value --force
          done

      - name: Clean up Self-hosted setup
        uses: colpal/actions-clean@36e6ca1abd35efe61cb60f912bd7837f67887c8a # tag=v1
        if: ${{ always() }} # To ensure this step runs even when earlier steps fail

# Deployments are automated via https://github.com/freeCodeCamp/news-config
